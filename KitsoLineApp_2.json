{"files":[{"id":"2d1c51ce-64db-4bb8-97db-4265ec70da1d","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Asia/Tokyo\",\n  \"dependencies\": {},\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\",\n  \"webapp\": {\n    \"executeAs\": \"USER_DEPLOYING\",\n    \"access\": \"ANYONE_ANONYMOUS\"\n  }\n}"},{"id":"280b470a-da9f-430f-970b-a1e249e95ae2","name":"main","type":"server_js","source":"const URL \u003d \"https://script.google.com/macros/s/AKfycbzpM_jgraLJRx9NzsEXmprpYBOtxy7tNThJldAIEatMFOBtVML3sVa9i6hAkTnNLsx0/exec\";\n\n// スプレッドシート(DB)の読み込み\nconst ss \u003d SpreadsheetApp.openById(\u00271BTDQoSE_wPYZoSHJhA4CcpqRk87skbeBQHwA7i09aNc\u0027);\nconst sheet_userID    \u003d ss.getSheetByName(\"UserID\")    || ss.insertSheet(\u0027UserID\u0027);\nconst sheet_Log       \u003d ss.getSheetByName(\"Log\")       || ss.insertSheet(\u0027Log\u0027);\nconst sheet_KeyLog    \u003d ss.getSheetByName(\"KeyLog\")    || ss.insertSheet(\u0027KeyLog\u0027);\nconst sheet_Reminder  \u003d ss.getSheetByName(\"Reminder\")  || ss.insertSheet(\u0027Reminder\u0027);\nconst sheet_ErrorLog  \u003d ss.getSheetByName(\"ErrorLog\")  || ss.insertSheet(\u0027ErrorLog\u0027);\nconst sheet_Attendance \u003d ss.getSheetByName(\"Attendance\") || ss.insertSheet(\u0027Attendance\u0027);\nconst sheet_Concert \u003d ss.getSheetByName(\"Concert\") || ss.insertSheet(\u0027Concert\u0027);\n\n// ヘッダー行の設定（Attendanceシート）\nif (sheet_Attendance.getLastRow() \u003d\u003d\u003d 0) {\n  sheet_Attendance.appendRow([\u0027Timestamp\u0027, \u0027UserID\u0027, \u0027Username\u0027, \u0027Date\u0027, \u0027Status\u0027]);\n}\n\n// 現在の日付\nconst date \u003d new Date();\n\nfunction doPost(e) {\n  sheet_Log.appendRow([new Date(), \"POST\", e.postData.contents]);\n\n  const event \u003d getEvent(e);\n  if (!event) return;\n\n  if (event.type \u003d\u003d\u003d \u0027message\u0027 \u0026\u0026 event.message.type \u003d\u003d\u003d \u0027text\u0027) {\n    switch(event.message.text){\n      case \"スケジュール\":\n        reply(event, handleSchedule());\n        break;\n      case \"出欠確認\":\n        replyContents(handleRollCall(event));\n        break;\n      case \"鍵管理\":\n        replyContents(handleKeyManagement(event.type, event));\n        break;\n      case \"使い方\":\n        reply(event, information(event));\n        break;\n      case \"リマインダー\":\n        replyContents(reminder(event));\n        break;\n      case \"イベント\":\n        reply(event, concertInfo());\n        break;\n      default:\n        reply(event, gemini(event.message.text));\n    }\n  }\n  else if (event.type \u003d\u003d\u003d \u0027postback\u0027) {\n    // 出欠確認のポストバックデータをハンドリング\n    if (event.postback.data.startsWith(\"rollcall\")) {\n      reply(event, addRollCall(event));\n    }\n    // キー管理のポストバックデータをハンドリング\n    else if(event.postback.data.includes(\"Key\")) {\n      replyContents(handleKeyManagement(event.type, event));\n    }\n  }\n}\n\nfunction doGet(e){\n  const path \u003d e.parameter[\"path\"]; // URL パラメータから \"path\" を取得\n  sheet_Log.appendRow([new Date(),\"GET\", path]);\n\n  switch (path){\n    case \"reminder\":\n      return handleReminder(e);\n    case \"user\":\n      return handleUserManagement(e);\n    case \"rollcall\":\n      return handleRollCallGET(e);\n    case \"consertInfo\":\n      return handleconsertInfoGET();\n    default:\n      return HtmlService.createHtmlOutput(`\u003ch1\u003e無効なパスです。\u003c/h1\u003e`).setTitle(\"エラー\");\n  }\n}"},{"id":"55a46f0f-8677-44ea-83aa-033349380de5","name":"util","type":"server_js","source":"let apiKeyCache \u003d new Map(); // API キーのキャッシュ\n\nfunction getApiKey(fileName) {\n  // キャッシュにキーが存在する場合はそれを返す\n  if (apiKeyCache.has(fileName)) {\n    sheet_Log.appendRow([new Date(), \"cache\"]);\n    return apiKeyCache.get(fileName);\n  }\n\n  const folderName \u003d \"KitsoLineApp_2\"; // フォルダ名\n\n  const folders \u003d DriveApp.getFoldersByName(folderName);\n\n  if (folders.hasNext()) {\n    const folder \u003d folders.next();\n    const files \u003d folder.getFilesByName(fileName);\n    if (files.hasNext()) {\n      const file \u003d files.next();\n      const apiKey \u003d file.getBlob().getDataAsString().trim();\n      apiKeyCache.set(fileName, apiKey); // キャッシュに保存\n      return apiKey;\n    } else {\n      throw new Error(`File \"${fileName}\" not found in folder \"${folderName}\".`);\n    }\n  } else {\n    throw new Error(`Folder \"${folderName}\" not found.`);\n  }\n}\n\nfunction getEvent(e){\n  const data    \u003d JSON.parse(e.postData.contents); // LINE から来た json データを JavaScript のオブジェクトに変換する\n  const events  \u003d data.events;\n  // ユーザー認証\n  if(!checkUser(events[0])) return 0;\n  return events[0];\n}\n\nfunction information(event)\n{\n  sheet_Log.appendRow([new Date(), \"information\"]);\n  const userid  \u003d event.source.userId;\n  const comment \u003d \"kitso line bot v2 へようこそ！\\n【使い方】\\nボタンを押すと機能が使えるよ！\\n・REMINDER\\n→ このアカウントを登録している人に対してリマインダーを設定することができます。\\n・SCHEDULE\\n→ Googleカレンダーに追加されてる予定を表示します。\\n・WHERE\u0027S KEY\\n→ 誰が鍵持っているかを確認できます。\\n・イベント情報\\n→ 近隣のコンサートホールで行われる演奏会の情報を表示します。\\n・出欠管理\\n→ 出欠の登録を行うことができます。\\n・その他任意の文章を送るとGemini君が答えてくれます。(15 request/min)\\n追加予定機能：webアプリを用いたプッシュ通知機能\"\n  return comment;\n}\n\n/**\n * 英語の曜日を日本語に変換する関数\n * @param {string} enDay - 英語の曜日（\u0027Mon\u0027, \u0027Tue\u0027, etc.）\n * @returns {string} - 日本語の曜日（\u0027月\u0027, \u0027火\u0027, etc.）\n */\nfunction getJapaneseDayOfWeek(enDay) {\n  const mapping \u003d {\n    \u0027Mon\u0027: \u0027月\u0027,\n    \u0027Tue\u0027: \u0027火\u0027,\n    \u0027Wed\u0027: \u0027水\u0027,\n    \u0027Thu\u0027: \u0027木\u0027,\n    \u0027Fri\u0027: \u0027金\u0027,\n    \u0027Sat\u0027: \u0027土\u0027,\n    \u0027Sun\u0027: \u0027日\u0027\n  };\n  return mapping[enDay] || enDay;\n}\n\nfunction getErrorLineNumber(error) {\n  const stackLines \u003d error.stack.split(\"\\n\");\n  if (stackLines.length \u003e 1) {\n    const errorLine \u003d stackLines[1].trim();\n    return errorLine;\n  }\n  return \"行数情報を取得できません\";\n}\n\n"},{"id":"e007cda9-023b-4f2c-b7f2-c1324b822228","name":"gemini","type":"server_js","source":"function gemini(message) {\n  const gemini_apiKey \u003d getApiKey(\"gemini_apikey.txt\"); // Gemini API の認証キー\n  const geminiEndpoint \u003d `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key\u003d${gemini_apiKey}`;\n  const payload \u003d {\n    \u0027contents\u0027: [\n      {\n        \u0027parts\u0027: [{\n          \u0027text\u0027: `${message}`\n        }]\n      }\n    ]\n  };\n  const options \u003d {\n    \u0027method\u0027: \u0027post\u0027,\n    \u0027contentType\u0027: \u0027application/json\u0027,\n    \u0027payload\u0027: JSON.stringify(payload)\n  };\n\n  try {\n    const response \u003d UrlFetchApp.fetch(geminiEndpoint, options);\n    const responseData \u003d JSON.parse(response.getContentText());\n    const extractedText \u003d extractGeminiText(responseData); // 応答部分を抽出\n    return extractedText;\n  } catch (error) {\n    errorMessage \u003d `Error: ${error.message}`;\n    return errorMessage;\n  }\n}\n\nfunction gemini_classicalTrivia(){\n  // クラシック音楽のうんちくを語るように指示\n  const systemPrompt \u003d \"あなたは日本人のクラシック音楽の専門家であり、興味深いうんちくを提供することが得意です。以下の指示に従って、クラシック音楽に関するうんちくを日本語で一つ提供してください。\";\n  return gemini(systemPrompt);\n}\n\n\n\n// Geminiのレスポンスからtext部分を抽出する関数\nfunction extractGeminiText(responseData) {\n  if (!responseData.candidates || responseData.candidates.length \u003d\u003d\u003d 0) {\n    return \"No response from Gemini.\";\n  }\n\n  const candidate \u003d responseData.candidates[0]; // 最初の候補を取得\n  if (candidate.content \u0026\u0026 candidate.content.parts \u0026\u0026 candidate.content.parts.length \u003e 0) {\n    return candidate.content.parts[0].text.trim(); // text部分を抽出してトリム\n  }\n\n  return \"No text content found.\";\n}"},{"id":"b3ccb52d-4d36-44a2-a341-f3f89da320cc","name":"LineAPI","type":"server_js","source":"// リプライ\nfunction reply(event, message)\n{\n  const channelAccessToken \u003d getApiKey(\"line_apikey.txt\"); // line API の認証キー\n  const replyUrl \u003d \"https://api.line.me/v2/bot/message/reply\"; \n\n  var contents \u003d {\n      replyToken: event.replyToken,\n      messages: [{ type: \u0027text\u0027, text: message }],\n    };\n\n  let options \u003d {\n    method: \u0027post\u0027,\n    contentType: \u0027application/json\u0027,\n    headers: {\n      Authorization: \u0027Bearer \u0027 + channelAccessToken\n    },\n    payload: JSON.stringify(contents)\n  };\n  sheet_Log.appendRow([new Date(),\"reply\", options]);\n  return UrlFetchApp.fetch(replyUrl, options);\n}\n\n// リプライ\nfunction replyContents(contents)\n{\n  sheet_Log.appendRow([new Date(), \"\", \"replyContsnts\", contents]);\n  const channelAccessToken \u003d getApiKey(\"line_apikey.txt\"); // line API の認証キー\n  const replyUrl \u003d \"https://api.line.me/v2/bot/message/reply\"; \n\n  let options \u003d {\n    method: \u0027post\u0027,\n    contentType: \u0027application/json\u0027,\n    headers: {\n      Authorization: \u0027Bearer \u0027 + channelAccessToken\n    },\n    payload: JSON.stringify(contents)\n  };\n  sheet_Log.appendRow([new Date(),\"replyContsnts\", options]);\n  return UrlFetchApp.fetch(replyUrl, options);\n}\n\n// ブロードキャスト\nfunction broadcast(broadcastMessage)\n{\n  const channelAccessToken \u003d getApiKey(\"line_apikey.txt\"); // line API の認証キー\n  UrlFetchApp.fetch(\u0027https://api.line.me/v2/bot/message/broadcast\u0027, {\n    method: \u0027post\u0027,\n    headers: {\n      \u0027Content-Type\u0027: \u0027application/json\u0027,\n      \u0027Authorization\u0027: \u0027Bearer \u0027 + channelAccessToken,\n    },\n    payload: JSON.stringify({\n      messages: [\n        {\n            type: \u0027text\u0027,\n            text: broadcastMessage\n        }\n      ]\n    }),\n  });\n}\n\n// プッシュメッセージ\nfunction push(userID,pushMessage)\n{\n  const channelAccessToken \u003d getApiKey(\"line_apikey.txt\"); // line API の認証キー\n  UrlFetchApp.fetch(\u0027https://api.line.me/v2/bot/message/push\u0027, {\n    method: \u0027post\u0027,\n    headers: {\n      \u0027Content-Type\u0027: \u0027application/json\u0027,\n      \u0027Authorization\u0027: \u0027Bearer \u0027 + channelAccessToken,\n    },\n    payload: JSON.stringify({\n      to:userID,\n      messages: [\n        {\n            type: \u0027text\u0027,\n            text: pushMessage\n        }\n      ]\n    }),\n  }); \n}"},{"id":"f7178e16-284f-4041-80c9-afdf43022f35","name":"reminder","type":"server_js","source":"\n// リマインダーの操作を処理する関数\nfunction handleReminder(e){\n  const operation \u003d e.parameter[\"operation\"];\n  const userid \u003d e.parameter[\"userid\"];\n  sheet_Log.appendRow([new Date(),\"GET\", \"reminder\", operation, userid]);\n  switch (operation) {\n    case \"add\":\n      return createAddReminderPage(userid);\n    case \"show\":\n      return createShowReminderPage(userid);\n    case \"delete\":\n      return createDeleteReminderPage(userid);\n    default:\n      return HtmlService.createHtmlOutput(`\u003ch1\u003e無効な操作です。\u003c/h1\u003e`);\n  }\n}\n\n// リマインダーを表示するための関数\nfunction createShowReminderPage(userid) {\n  try {\n    sheet_Log.appendRow([new Date(), \"GET\", \"createShowReminderPage\", `userid: ${userid}`]);\n\n    // HTMLテンプレートを取得し、useridを設定\n    const template \u003d HtmlService.createTemplateFromFile(\u0027showReminder\u0027);\n    template.userid \u003d userid;\n    return template.evaluate().setTitle(\"リマインダー表示\").addMetaTag(\u0027viewport\u0027, \u0027width\u003ddevice-width, initial-scale\u003d1\u0027);\n  } catch (error) {\n    Logger.log(`createShowReminderPage エラー: ${error.toString()}`);\n    sheet_Log.appendRow([new Date(), \"ERROR\", \"createShowReminderPage\", error.toString()]);\n\n    return HtmlService.createHtmlOutput(`\n      \u003ch1\u003eエラーが発生しました\u003c/h1\u003e\n      \u003cp\u003eリマインダー表示ページの作成中に問題が発生しました。後ほど再試行してください。\u003c/p\u003e\n      \u003cp\u003e詳細: ${error.message}\u003c/p\u003e\n    `).setTitle(\"エラー\");\n  }\n}\n\n// リマインダーを処理する関数（Webhookなどから呼び出される）\nfunction reminder(event) {\n  const userID  \u003d event.source.userId;\n  var contents \u003d {\n    replyToken: event.replyToken,\n    messages: [{ \n      \"type\": \"template\",\n      \"altText\": \"リマインダー\",\n      \"template\": {\n        \"type\": \"buttons\",\n        \"title\": \"リマインダー\",\n        \"text\": \"Please select\",\n        \"actions\": [\n          {\n            \"type\": \"uri\",\n            \"label\": \"リマインダーの登録\",\n            \"uri\": `${URL}?path\u003dreminder\u0026operation\u003dadd\u0026userid\u003d${userID}`,\n          },\n          {\n            \"type\": \"uri\",\n            \"label\": \"リマインダーの確認\",\n            \"uri\": `${URL}?path\u003dreminder\u0026operation\u003dshow\u0026userid\u003d${userID}`,\n          },\n          {\n            \"type\": \"uri\",\n            \"label\": \"リマインダーの削除\",\n            \"uri\": `${URL}?path\u003dreminder\u0026operation\u003ddelete\u0026userid\u003d${userID}`,\n          },\n        ]\n      }\n    },]\n  }\n  return contents;\n}\n\nfunction getReminders(userid) {\n  try {\n    if (!sheet_Log || !sheet_Reminder) {\n      throw new Error(\u0027必要なシートが見つかりません。シート名を確認してください。\u0027);\n    }\n\n    sheet_Log.appendRow([new Date(), \"getReminders\", `userid: ${userid}`]);\n\n    const data \u003d sheet_Reminder.getDataRange().getValues();\n    const reminders \u003d [];\n  \n    const startRow \u003d 0;\n    for (let i \u003d startRow; i \u003c data.length; i++) {\n      const row \u003d data[i];\n      const rowUserid \u003d row[2]; \n      if (rowUserid \u003d\u003d\u003d userid) {\n        reminders.push({\n          uuid: row[1],\n          userid: row[2],\n          date: row[3],\n          title: row[4],\n          body: row[5]\n        });\n      }\n    }\n    return JSON.stringify(reminders);\n  } catch (error) {\n    Logger.log(`getReminders エラー: ${error.toString()}`);\n    // const sheet_Log \u003d SPREADSHEET.getSheetByName(\u0027Log\u0027);\n    if (sheet_Log) {\n      sheet_Log.appendRow([new Date(), \"ERROR\", \"getReminders\", error.toString()]);\n    }\n    return JSON.stringify([]);\n  }\n}\n\nfunction getAllReminders(userid) {\n  try {\n    // const sheet_Log \u003d SPREADSHEET.getSheetByName(\u0027Log\u0027);\n    // const sheet_Reminder \u003d SPREADSHEET.getSheetByName(\u0027Reminder\u0027);\n    if (!sheet_Log || !sheet_Reminder) {\n      throw new Error(\u0027必要なシートが見つかりません。シート名を確認してください。\u0027);\n    }\n\n    sheet_Log.appendRow([new Date(), \"getAllReminders\", `userid: ${userid}`]);\n\n    const data \u003d sheet_Reminder.getDataRange().getValues();\n    const reminders \u003d [];\n  \n    const startRow \u003d 0;\n    for (let i \u003d startRow; i \u003c data.length; i++) {\n      const row \u003d data[i];\n      reminders.push({\n        uuid: row[1],\n        userid: row[2],\n        date: row[3],\n        title: row[4],\n        body: row[5]\n      });\n    }\n    sheet_Log.appendRow([new Date(), \"reply\", \"getAllReminders\", reminders[0]]);\n    return JSON.stringify(reminders);\n  } catch (error) {\n    Logger.log(`getReminders エラー: ${error.toString()}`);\n    const sheet_Log \u003d SPREADSHEET.getSheetByName(\u0027Log\u0027);\n    if (sheet_Log) {\n      sheet_Log.appendRow([new Date(), \"ERROR\", \"getAllReminders\", error.toString()]);\n    }\n    return JSON.stringify([]);\n  }\n}\n\n\n// ヘッダー行の有無を確認する関数\nfunction hasHeaderRow() {\n  const data \u003d sheet_Reminder.getDataRange().getValues();\n  if (data.length \u003d\u003d\u003d 0) return false;\n  const header \u003d data[0];\n  \n  // ヘッダー行が存在し、最初のセルが \u0027Timestamp\u0027 であることを確認\n  if (typeof header[0] !\u003d\u003d \u0027string\u0027) return false;\n  return header[0].toLowerCase() \u003d\u003d\u003d \u0027timestamp\u0027; // ヘッダーがあるかどうかを判定\n}\n\n// リマインダー確認ページを作成する関数\nfunction createShowReminderPage(userid) {\n  try {\n    sheet_Log.appendRow([new Date(), \"GET\", \"createShowReminderPage\", `userid: ${userid}`]);\n\n    // HTMLテンプレートを取得し、useridを設定\n    const template \u003d HtmlService.createTemplateFromFile(\u0027showReminder\u0027);\n    template.userid \u003d userid;\n    return template.evaluate().setTitle(\"リマインダー確認\").addMetaTag(\u0027viewport\u0027, \u0027width\u003ddevice-width, initial-scale\u003d1\u0027);\n  } catch (error) {\n    Logger.log(`createShowReminderPage エラー: ${error.toString()}`);\n    sheet_Log.appendRow([new Date(), \"ERROR\", \"createShowReminderPage\", error.toString()]);\n\n    return HtmlService.createHtmlOutput(`\n      \u003ch1\u003eエラーが発生しました\u003c/h1\u003e\n      \u003cp\u003eリマインダー登録ページの作成中に問題が発生しました。後ほど再試行してください。\u003c/p\u003e\n      \u003cp\u003e詳細: ${error.message}\u003c/p\u003e\n    `).setTitle(\"エラー\");\n  }\n}\n\n// リマインダー追加ページを作成する関数\nfunction createAddReminderPage(userid) {\n  try {\n    sheet_Log.appendRow([new Date(), \"GET\", \"createAddReminderPage\", `userid: ${userid}`]);\n\n    // HTMLテンプレートを取得し、useridを設定\n    const template \u003d HtmlService.createTemplateFromFile(\u0027addReminder\u0027);\n    template.userid \u003d userid;\n    return template.evaluate().setTitle(\"リマインダー登録\").addMetaTag(\u0027viewport\u0027, \u0027width\u003ddevice-width, initial-scale\u003d1\u0027);\n  } catch (error) {\n    Logger.log(`createAddReminderPage エラー: ${error.toString()}`);\n    sheet_Log.appendRow([new Date(), \"ERROR\", \"createAddReminderPage\", error.toString()]);\n\n    return HtmlService.createHtmlOutput(`\n      \u003ch1\u003eエラーが発生しました\u003c/h1\u003e\n      \u003cp\u003eリマインダー登録ページの作成中に問題が発生しました。後ほど再試行してください。\u003c/p\u003e\n      \u003cp\u003e詳細: ${error.message}\u003c/p\u003e\n    `).setTitle(\"エラー\");\n  }\n}\n\n// リマインダーを追加する関数\nfunction addReminder(addReminderForm){\n  sheet_Log.appendRow([new Date(), \"addReminder\"]);\n  try {\n    const userid \u003d addReminderForm.userid ? addReminderForm.userid.trim() : \u0027\u0027;\n    const title \u003d addReminderForm.title ? addReminderForm.title.trim() : \u0027\u0027;\n    const date \u003d addReminderForm.date ? addReminderForm.date.trim() : \u0027\u0027;\n    const body \u003d addReminderForm.body ? addReminderForm.body.trim() : \u0027\u0027;\n\n    if (!userid || !title || !body) {\n      throw new Error(\u0027ユーザーIDまたはタイトル、本文が不足しています。\u0027);\n    }\n    const uuid \u003d Utilities.getUuid()\n\n    // 新しいリマインダーを追加\n    sheet_Reminder.appendRow([new Date(), uuid, userid, date, title, body]);\n\n    // ログに記録\n    sheet_Log.appendRow([new Date(), \"addReminder\", uuid, date, title, body]);\n\n    return \"リマインダー登録が完了しました。\";\n  } catch (error) {\n    Logger.log(`addReminder エラー: ${error.toString()}`);\n\n    try {\n      sheet_Log.appendRow([new Date(), \"ERROR\", \"addReminder\", error.toString()]);\n    } catch (logError) {\n      Logger.log(`ログシートへの記録に失敗しました: ${logError.toString()}`);\n      Logger.log(`元のエラー: ${error.toString()}`);\n    }\n\n    // エラーを再スローしてクライアント側のエラーハンドラをトリガー\n    throw error;\n  }\n}\n\n// リマインダー削除ページを作成する関数\nfunction createDeleteReminderPage(userid) {\n  try {\n    sheet_Log.appendRow([new Date(), \"GET\", \"createDeleteReminderPage\", `userid: ${userid}`]);\n\n    // HTMLテンプレートを取得し、useridを設定\n    const template \u003d HtmlService.createTemplateFromFile(\u0027deleteReminder\u0027);\n    template.userid \u003d userid;\n    return template.evaluate().setTitle(\"リマインダー削除\").addMetaTag(\u0027viewport\u0027, \u0027width\u003ddevice-width, initial-scale\u003d1\u0027);\n  } catch (error) {\n    Logger.log(`createDeleteReminderPage エラー: ${error.toString()}`);\n    sheet_Log.appendRow([new Date(), \"ERROR\", \"createDeleteReminderPage\", error.toString()]);\n\n    return HtmlService.createHtmlOutput(`\n      \u003ch1\u003eエラーが発生しました\u003c/h1\u003e\n      \u003cp\u003eリマインダー削除ページの作成中に問題が発生しました。後ほど再試行してください。\u003c/p\u003e\n      \u003cp\u003e詳細: ${error.message}\u003c/p\u003e\n    `).setTitle(\"エラー\");\n  }\n}\n\n// リマインダーを削除する関数\nfunction deleteReminder(uuid, userid) {\n  sheet_Log.appendRow([new Date(), \"deleteReminder\", `uuid: ${uuid}`, `userid: ${userid}`]);\n  try {\n    const data \u003d sheet_Reminder.getDataRange().getValues();\n    let deleted \u003d false;\n\n    // シートにヘッダーがある場合は1から、ない場合は0からループ\n    const startRow \u003d hasHeaderRow() ? 1 : 0;\n\n    for (let i \u003d startRow; i \u003c data.length; i++) {\n      const row \u003d data[i];\n      const rowId \u003d row[1]; \n      const rowUserid \u003d row[2];\n      if (rowId \u003d\u003d\u003d uuid \u0026\u0026 rowUserid \u003d\u003d\u003d userid) {\n        sheet_Reminder.deleteRow(i + 1); // シートは1ベース\n        deleted \u003d true;\n        break;\n      }\n    }\n\n    if (deleted) {\n      sheet_Log.appendRow([new Date(), \"deleteReminder\", \"success\", `uuId: ${uuid}`]);\n      return \"success\";\n    } else {\n      throw new Error(\u0027指定されたリマインダーが見つかりませんでした。\u0027);\n    }\n  } catch (error) {\n    Logger.log(`deleteReminder エラー: ${error.toString()}`);\n    try {\n      sheet_Log.appendRow([new Date(), \"ERROR\", \"deleteReminder\", error.toString()]);\n    } catch (logError) {\n      Logger.log(`ログシートへの記録に失敗しました: ${logError.toString()}`);\n      Logger.log(`元のエラー: ${error.toString()}`);\n    }\n\n    throw error;\n  }\n}\n"},{"id":"eaa708c6-940d-4589-905d-76bbfdfaa4bf","name":"userManagement","type":"server_js","source":"/**\n * ユーザー管理を処理する関数\n * @param {Event} e - イベントオブジェクト\n * @returns {HtmlOutput} - HTML出力\n */\n\n\nfunction handleUserManagement(e) {\n  try {\n    const operation \u003d e.parameter[\"operation\"];\n    const userid \u003d e.parameter[\"userid\"];\n\n    switch (operation) {\n      case \"add\":\n        return createAddUserPage(userid);\n      // 他の操作を追加する場合はここにケースを追加\n      // case \"show\":\n      //   return HtmlService.createHtmlOutput(`\u003ch1\u003eShow reminder\u003c/h1\u003e\\n \u003ch2\u003eHello ${userid} \u003c\\h2\u003e`);\n      // case \"delete\":\n      //   return HtmlService.createHtmlOutput(`\u003ch1\u003eDelete reminder\u003c/h1\u003e\\n \u003ch2\u003eHello ${userid} \u003c\\h2\u003e`);\n      default:\n        return HtmlService.createHtmlOutput(`\u003ch1\u003e無効な操作です。\u003c/h1\u003e`).setTitle(\"エラー\");\n    }\n  } catch (error) {\n    Logger.log(`handleUserManagement エラー: ${error.toString()}`);\n    return HtmlService.createHtmlOutput(`\n      \u003ch1\u003eエラーが発生しました\u003c/h1\u003e\n      \u003cp\u003eユーザー管理の処理中に問題が発生しました。後ほど再試行してください。\u003c/p\u003e\n      \u003cp\u003e詳細: ${error.message}\u003c/p\u003e\n    `).setTitle(\"エラー\");\n  }\n}\n\n/**\n * ユーザー追加ページを作成する関数\n * @param {string} userid - ユーザーID\n * @returns {HtmlOutput} - HTML出力\n */\nfunction createAddUserPage(userid) {\n  try {\n    sheet_Log.appendRow([new Date(), \"GET\", \"createAddUserPage\", `userid: ${userid}`]);\n\n    // HTMLテンプレートを取得し、useridを設定\n    const template \u003d HtmlService.createTemplateFromFile(\u0027addUsername\u0027);\n    template.userid \u003d userid;\n    return template.evaluate().setTitle(\"ユーザー登録\").addMetaTag(\u0027viewport\u0027, \u0027width\u003ddevice-width, initial-scale\u003d1\u0027);\n  } catch (error) {\n    Logger.log(`createAddUserPage エラー: ${error.toString()}`);\n    sheet_Log.appendRow([new Date(), \"ERROR\", \"createAddUserPage\", error.toString()]);\n\n    return HtmlService.createHtmlOutput(`\n      \u003ch1\u003eエラーが発生しました\u003c/h1\u003e\n      \u003cp\u003eユーザーページの作成中に問題が発生しました。後ほど再試行してください。\u003c/p\u003e\n      \u003cp\u003e詳細: ${error.message}\u003c/p\u003e\n    `).setTitle(\"エラー\");\n  }\n}\n\n/**\n * ユーザーを追加する関数\n * @param {Object} addUserForm - フォームから送信されたデータ\n * @returns {string} - 成功メッセージ\n */\nfunction addUser(addUserForm) {\n  try {\n\n    const name \u003d addUserForm.name ? addUserForm.name.trim() : \u0027\u0027;\n    const userid \u003d addUserForm.userid ? addUserForm.userid.trim() : \u0027\u0027;\n\n    if (!userid || !name) {\n      throw new Error(\u0027ユーザーIDまたは名前が不足しています。\u0027);\n    }\n\n    // 既存のユーザーIDをチェック\n    const existingIds \u003d sheet_userID.getRange(\"A:A\").getValues().flat();\n    if (existingIds.includes(userid)) {\n      throw new Error(\u0027このユーザーIDは既に登録されています。\u0027);\n    }\n\n    // 新しいユーザーを追加\n    sheet_userID.appendRow([userid, name, new Date()]);\n\n    // ログに記録\n    sheet_Log.appendRow([new Date(), \"ADD_USER\", userid, name]);\n\n    return \"ユーザーの登録が完了しました。ありがとうございます！\";\n  } catch (error) {\n    Logger.log(`addUser エラー: ${error.toString()}`);\n\n    try {\n      sheet_Log.appendRow([new Date(), \"ERROR\", \"addUser\", error.toString()]);\n    } catch (logError) {\n      Logger.log(`ログシートへの記録に失敗しました: ${logError.toString()}`);\n      Logger.log(`元のエラー: ${error.toString()}`);\n    }\n\n    // エラーを再スローしてクライアント側のエラーハンドラをトリガー\n    throw error;\n  }\n}\n\n/**\n * ユーザーをチェックする関数（LINE Messaging APIなどで使用）\n * @param {Object} event - イベントオブジェクト\n * @returns {string|boolean} - ユーザー名またはfalse\n */\nfunction checkUser(event) {\n  try {\n    let userId \u003d event.source.userId;\n    let textFinder \u003d sheet_userID.createTextFinder(userId);\n    let cells \u003d textFinder.findAll();\n    let username;\n\n    switch (cells.length) {\n      case 0:\n      // sheet_Log.appendRow([new Date(), \"\", \"checkUser\", \"case1\"]);\n        // 初期設定\n        let contents \u003d {\n          replyToken: event.replyToken,\n          messages: [{\n            \"type\": \"template\",\n            \"altText\": \"ユーザー名が登録されていません。下のボタンから登録してください。\",\n            \"template\": {\n              \"type\": \"buttons\",\n              \"title\": \"ユーザー名が\\n登録されていません\",\n              \"text\": \" \",\n              \"actions\": [\n                {\n                  \"type\": \"uri\",\n                  \"label\": \"ユーザーの登録\",\n                  \"uri\": `${URL}?path\u003duser\u0026operation\u003dadd\u0026userid\u003d${userId}`,\n                },\n              ]\n            }\n          },]\n        };\n        replyContents(contents);\n        username \u003d false;\n        break;\n      case 1:\n        // sheet_Log.appendRow([new Date(), \"\", \"checkUser\", \"case2\"]);\n        username \u003d cells[0].offset(0, 1).getValue();\n        break;\n      default:\n        // 重複がある場合の処理（必要に応じて実装）\n        username \u003d cells[0].offset(0, 1).getValue(); // 仮\n    }\n    return username;\n  } catch (error) {\n    sheet_Log.appendRow([new Date(), \"ERROR\", \"checkUser\", error.toString()]);\n    Logger.log(`checkUser エラー: ${error.toString()}`);\n    return false;\n  }\n}\n\n// ユーザーIDからユーザー名を取得する関数\nfunction getUsername(userId) {\n  const data \u003d sheet_userID.getDataRange().getValues(); // シートの全データを取得\n  for (let i \u003d 1; i \u003c data.length; i++) { // 1行目はヘッダーと仮定\n    if (data[i][0] \u003d\u003d\u003d userId) {\n      return data[i][1]; // ユーザー名を返す\n    }\n  }\n  return \"不明なユーザー\"; // ユーザーIDが見つからない場合\n}\n\nfunction getUserIdToNameMap() {\n  const data \u003d sheet_userID.getDataRange().getValues(); // Usersシートからデータを取得\n  const userIdToName \u003d {};\n\n  for (let i \u003d 1; i \u003c data.length; i++) { // ヘッダーを除く\n    const userID \u003d data[i][0]?.toString().trim(); // UserID列\n    const userName \u003d data[i][1]?.toString().trim(); // 名前列\n    if (userID \u0026\u0026 userName) {\n      userIdToName[userID] \u003d userName;\n    }\n  }\n\n  return userIdToName;\n}\n"},{"id":"b1a79d17-8ae4-452d-966d-eaf4af4ce229","name":"addUsername","type":"html","source":"\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n  \u003chead\u003e\n    \u003cmeta charset\u003d\"UTF-8\"\u003e\n    \u003ctitle\u003eユーザー登録フォーム\u003c/title\u003e\n    \u003cstyle\u003e\n      /* リセットCSS */\n      * {\n        box-sizing: border-box;\n        margin: 0;\n        padding: 0;\n      }\n\n      body {\n        font-family: Arial, sans-serif;\n        padding: 20px;\n        background-color: #f0f2f5;\n      }\n\n      .container {\n        max-width: 500px;\n        margin: 0 auto;\n        background-color: #fff;\n        padding: 30px;\n        border-radius: 8px;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n      }\n\n      h1 {\n        text-align: center;\n        margin-bottom: 20px;\n        color: #333;\n      }\n\n      form {\n        display: flex;\n        flex-direction: column;\n      }\n\n      label {\n        margin-bottom: 5px;\n        color: #555;\n      }\n\n      input[type\u003d\"text\"],\n      input[type\u003d\"button\"] {\n        padding: 10px;\n        margin-bottom: 15px;\n        border: 1px solid #ccc;\n        border-radius: 4px;\n        font-size: 16px;\n      }\n\n      input[type\u003d\"button\"] {\n        background-color: #28a745;\n        color: #fff;\n        border: none;\n        cursor: pointer;\n        transition: background-color 0.3s ease;\n      }\n\n      input[type\u003d\"button\"]:hover {\n        background-color: #218838;\n      }\n\n      /* メッセージスタイル */\n      .message {\n        padding: 15px;\n        border-radius: 4px;\n        margin-top: 20px;\n        display: none;\n      }\n\n      .success {\n        background-color: #d4edda;\n        color: #155724;\n        border: 1px solid #c3e6cb;\n      }\n\n      .error {\n        background-color: #f8d7da;\n        color: #721c24;\n        border: 1px solid #f5c6cb;\n      }\n\n      /* レスポンシブデザイン */\n      @media (max-width: 600px) {\n        .container {\n          padding: 20px;\n        }\n\n        input[type\u003d\"text\"],\n        input[type\u003d\"button\"] {\n          font-size: 14px;\n          padding: 8px;\n        }\n\n        h1 {\n          font-size: 24px;\n        }\n      }\n    \u003c/style\u003e\n  \u003c/head\u003e\n  \u003cbody\u003e\n    \u003cdiv class\u003d\"container\"\u003e\n      \u003ch1\u003eユーザー登録フォーム\u003c/h1\u003e\n      \n      \u003c!-- 登録フォーム --\u003e\n      \u003cform id\u003d\"addUserForm\"\u003e\n        \u003cinput type\u003d\"hidden\" id\u003d\"postId\" name\u003d\"userid\" value\u003d\"\u003c?\u003d userid ?\u003e\" /\u003e\n        \n        \u003clabel for\u003d\"name\"\u003e名前:\u003c/label\u003e\n        \u003cinput type\u003d\"text\" id\u003d\"name\" name\u003d\"name\" required\u003e\n        \n        \u003cinput type\u003d\"button\" value\u003d\"送信\" onclick\u003d\"submitForm()\"\u003e\n      \u003c/form\u003e \n      \n      \u003c!-- 登録完了メッセージ --\u003e\n      \u003cdiv id\u003d\"successMessage\" class\u003d\"message success\"\u003e\n        登録が完了しました。ありがとうございます！\n      \u003c/div\u003e\n      \n      \u003c!-- エラーメッセージ --\u003e\n      \u003cdiv id\u003d\"errorMessage\" class\u003d\"message error\"\u003e\n        登録中にエラーが発生しました。もう一度お試しください。\n      \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cscript\u003e\n      function submitForm() {\n        // フォームデータを取得\n        const form \u003d document.getElementById(\"addUserForm\");\n        const formData \u003d {\n          userid: form.userid.value,\n          name: form.name.value\n        };\n        \n        // 送信ボタンを無効化して送信中の状態を表示\n        const submitButton \u003d form.querySelector(\"input[type\u003d\u0027button\u0027]\");\n        submitButton.disabled \u003d true;\n        submitButton.value \u003d \"送信中...\";\n        \n        // GASのサーバーサイド関数を呼び出す\n        google.script.run\n          .withSuccessHandler(function(response) {\n            // 登録完了メッセージを表示\n            form.style.display \u003d \"none\";\n            document.getElementById(\"successMessage\").style.display \u003d \"block\";\n          })\n          .withFailureHandler(function(error) {\n            // エラーメッセージを表示\n            document.getElementById(\"errorMessage\").style.display \u003d \"block\";\n            console.error(\"エラー:\", error);\n            // 送信ボタンを再度有効化\n            submitButton.disabled \u003d false;\n            submitButton.value \u003d \"送信\";\n          })\n          .addUser(formData);\n      }\n    \u003c/script\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n"},{"id":"f1a05b78-3b40-4e64-a0e0-e4f9ca959200","name":"calendar","type":"server_js","source":"\nfunction handleSchedule() {\n  return getMessage(0)\n}\n\n/**\n * メッセージ内容を取得する関数\n * @param {number} daysFromToday - 今日からの日数\n * @return {string} メッセージ内容\n */\nfunction getMessage(daysFromToday) {\n  const weekDays \u003d [\u0027日\u0027, \u0027月\u0027, \u0027火\u0027, \u0027水\u0027, \u0027木\u0027, \u0027金\u0027, \u0027土\u0027];\n  const calendar \u003d CalendarApp.getCalendarById(\u0027kitsocalender@gmail.com\u0027);\n  let date \u003d new Date();\n  let messageHeader \u003d \u0027\u0027;\n  let messageBody \u003d \u0027\u0027;\n\n  // タイトルの設定\n  if (daysFromToday \u003d\u003d\u003d 0) {\n    messageHeader \u003d \u0027本日 \u0027;\n  } else if (daysFromToday \u003d\u003d\u003d 1) {\n    messageHeader \u003d \u0027明日 \u0027;\n  }\n\n  // 日付を更新\n  date \u003d new Date(\n    date.getFullYear(),\n    date.getMonth(),\n    date.getDate() + daysFromToday\n  );\n\n  messageHeader +\u003d `${Utilities.formatDate(date, \u0027JST\u0027, \u0027M/d\u0027)} (${weekDays[date.getDay()]}) の予定\\n`;\n\n  // イベント内容の取得\n  messageBody \u003d getEvents(calendar, date);\n\n  // イベントがない場合のメッセージ設定\n  if (isNull(messageBody)) {\n    const dayOfWeek \u003d date.getDay();\n    if (dayOfWeek \u003e\u003d 1 \u0026\u0026 dayOfWeek \u003c\u003d 3) {\n      messageBody \u003d \u0027個人練習日です。合奏予定はありません。\u0027;\n    } else if (dayOfWeek \u003d\u003d\u003d 4 || dayOfWeek \u003d\u003d\u003d 5) {\n      messageBody \u003d \u0027開放日です。個人練習ができます。\u0027;\n    } else {\n      messageBody \u003d \u0027今日は予定はありません。\u0027;\n    }\n  }\n\n  return `${messageHeader}${messageBody}`;\n}\n\n/**\n * カレンダーからイベント内容を取得する関数\n * @param {Calendar} calendar - カレンダーオブジェクト\n * @param {Date} date - 日付オブジェクト\n * @return {string} イベント内容\n */\nfunction getEvents(calendar, date) {\n  let eventDetails \u003d \u0027\u0027;\n\n  if (!isNull(calendar)) {\n    const events \u003d calendar.getEventsForDay(date);\n    events.forEach((event, index) \u003d\u003e {\n      if (index \u003e 0) {\n        eventDetails +\u003d \u0027\\n\u0027;\n      }\n\n      const startTime \u003d formatTime(event.getStartTime());\n      const endTime \u003d formatTime(event.getEndTime());\n      const timeRange \u003d startTime \u003d\u003d\u003d endTime ? \u0027 \u0027 : `${startTime}～${endTime}`;\n      eventDetails +\u003d `${timeRange}【${event.getTitle()}】`;\n\n      const description \u003d event.getDescription();\n      const location \u003d event.getLocation();\n\n      if (!isNull(description)) {\n        eventDetails +\u003d `\\n説明：\\n${description}`;\n      }\n\n      if (!isNull(location)) {\n        eventDetails +\u003d `\\n場所：\\n${location}`;\n      }\n    });\n  }\n\n  return eventDetails;\n}\n\n/**\n * 時刻をフォーマットする関数\n * @param {Date} date - 日付オブジェクト\n * @return {string} フォーマットされた時刻（HH:mm）\n */\nfunction formatTime(date) {\n  return Utilities.formatDate(date, \u0027JST\u0027, \u0027HH:mm\u0027);\n}\n\n/**\n * 値がNULLかどうかを判定する関数\n * @param {any} value - 判定対象の値\n * @return {boolean} NULLまたは空文字の場合はtrue\n */\nfunction isNull(value) {\n  return value \u003d\u003d\u003d \u0027\u0027 || value \u003d\u003d\u003d null || value \u003d\u003d\u003d undefined;\n}\n\n"},{"id":"ddb402dc-2649-4036-8c18-d4a584d6b703","name":"keyManagement","type":"server_js","source":"function handleKeyManagement(status, event) {\n  switch(status){\n    case \u0027message\u0027:\n      return keyStatus(event);\n    case \u0027postback\u0027:\n      return borrowAndReturnKey(event);\n  }\n}\n\n// `keyStatus` \nfunction keyStatus(event) {\n  try {\n    let userId \u003d event.source.userId;\n    let username_500 \u003d \"不明なユーザー\";\n    let username_ClubRoom \u003d \"不明なユーザー\";\n    \n    // ユーザー名を取得\n    username_500 \u003d getUsername(userId);\n    username_ClubRoom \u003d getUsername(userId);\n    \n    // KeyLogシートから鍵の状態を取得\n    const key500t \u003d sheet_KeyLog.createTextFinder(\u0027Key500\u0027).findAll();\n    const key500 \u003d key500t.length;\n    const keyCRoomt \u003d sheet_KeyLog.createTextFinder(\u0027KeyClubRoom\u0027).findAll();\n    const keyCRoom \u003d keyCRoomt.length;\n    \n    // 500人講義室の鍵の状態\n    let contents_500;\n    if (key500 % 2 !\u003d\u003d 0) {\n      // 借りられている時\n      contents_500 \u003d {\n        \"type\": \"template\",\n        \"altText\": \"鍵の管理 500人講義室\",\n        \"template\": {\n          \"type\": \"buttons\",\n          \"title\": \"500人講義室\",\n          \"text\": `鍵は${username_500}さんが借りています。`,\n          \"actions\": [\n            {\n              \"type\": \"postback\",\n              \"label\": \"５００人講義室の鍵を返す\",\n              \"data\": \"returnKey500\"\n            },\n          ]\n        }\n      };\n    } else {\n      // 借りられていない時\n      contents_500 \u003d {\n        \"type\": \"template\",\n        \"altText\": \"鍵の管理 500人講義室\",\n        \"template\": {\n          \"type\": \"buttons\",\n          \"title\": \"500人講義室\",\n          \"text\": \"500人講義室の鍵はまだ借りられていません。\",\n          \"actions\": [\n            {\n              \"type\": \"postback\",\n              \"label\": \"５００人講義室の鍵を借りる\",\n              \"data\": \"borrowKey500\" // データを修正\n            },\n          ]\n        }\n      };\n    }\n    \n    // 部室の鍵の状態\n    let contents_ClubRoom;\n    if (keyCRoom % 2 !\u003d\u003d 0) {\n      // 借りられている時\n      contents_ClubRoom \u003d {\n        \"type\": \"template\",\n        \"altText\": \"鍵の管理 部室の鍵\",\n        \"template\": {\n          \"type\": \"buttons\",\n          \"title\": \"部室の鍵\",\n          \"text\": `鍵は${username_ClubRoom}さんが借りています。`,\n          \"actions\": [\n            {\n              \"type\": \"postback\",\n              \"label\": \"部室の鍵を返す\",\n              \"data\": \"returnKeyClubRoom\"\n            },\n          ]\n        }\n      };\n    } else {\n      // 借りられていない時\n      contents_ClubRoom \u003d {\n        \"type\": \"template\",\n        \"altText\": \"鍵の管理 部室の鍵\",\n        \"template\": {\n          \"type\": \"buttons\",\n          \"title\": \"部室の鍵\",\n          \"text\": \"部室の鍵はまだ借りられていません。\",\n          \"actions\": [\n            {\n              \"type\": \"postback\",\n              \"label\": \"部室の鍵を借りる\",\n              \"data\": \"borrowKeyClubRoom\" // データを修正\n            },\n          ]\n        }\n      };\n    }\n    \n    // 返信内容の構築\n    const contents \u003d {\n      replyToken: event.replyToken,\n      messages: [contents_500, contents_ClubRoom], // 正しい構造に修正\n    };\n    \n    // ログに記録\n    sheet_Log.appendRow([new Date(), \"keyStatus\", JSON.stringify(contents.messages)]);\n    \n    // 返信関数を呼び出す\n    return contents;\n    \n  } catch (error) {\n    // エラーログに記録\n    sheet_ErrorLog.appendRow([new Date(), \u0027keyStatus\u0027, error.toString()]);\n    \n    // ユーザーにエラーメッセージを返信\n    try {\n      const errorMessage \u003d \"鍵の状態を取得中にエラーが発生しました。しばらくしてから再度お試しください。\";\n      const errorContents \u003d {\n        replyToken: event.replyToken,\n        messages: [{ type: \u0027text\u0027, text: errorMessage }],\n      };\n      return errorContents;\n    } catch (err) {\n      // 再度エラーが発生した場合、追加のログを記録\n      sheet_ErrorLog.appendRow([new Date(), \u0027keyStatus_error_reply\u0027, err.toString()]);\n    }\n  }\n}\n\n\n// `borrowAndReturnKey` 関数の修正\nfunction borrowAndReturnKey(event) {\n  try {\n    let key;\n    \n    // イベントがpostbackかどうかを確認\n    if (event.postback \u0026\u0026 event.postback.data) {\n      key \u003d event.postback.data;\n    } else {\n      // 他のイベントタイプの場合の処理（必要に応じて）\n      throw new Error(\"Unsupported event type or missing postback data.\");\n    }\n\n    const userID \u003d event.source.userId;\n    const date \u003d new Date();\n    \n    // KeyLogシートから鍵の状態を取得\n    const key500t \u003d sheet_KeyLog.createTextFinder(\u0027Key500\u0027).findAll();\n    const key500 \u003d key500t.length;\n    const keyCRoomt \u003d sheet_KeyLog.createTextFinder(\u0027KeyClubRoom\u0027).findAll();\n    const keyCRoom \u003d keyCRoomt.length;\n    \n    let contents;\n    \n    switch(key) {\n      case \u0027borrowKey500\u0027:\n        if (key500 % 2 !\u003d\u003d 0) {\n          // すでに借りられている時\n          contents \u003d {\n            replyToken: event.replyToken,\n            messages: [{ type: \u0027text\u0027, text: \u0027すでに500人講義室の鍵が借りられています。\u0027 }],\n          };\n        } else {\n          // 鍵を借りる処理\n          sheet_KeyLog.appendRow([date, userID, \u0027borrowKey500\u0027]);\n          sheet_Log.appendRow([date, userID, \u0027borrowKey500\u0027]);\n          contents \u003d {\n            replyToken: event.replyToken,\n            messages: [{ type: \u0027text\u0027, text: \u0027500人講義室の鍵を借りました。\u0027 }],\n          };\n        }\n        break;\n        \n      case \u0027returnKey500\u0027:\n        if (key500 % 2 \u003d\u003d\u003d 0) {\n          // 鍵が借りられていない時\n          contents \u003d {\n            replyToken: event.replyToken,\n            messages: [{ type: \u0027text\u0027, text: \u0027500人講義室の鍵は借りられていません。\u0027 }],\n          };\n        } else {\n          // 鍵を返す処理\n          sheet_KeyLog.appendRow([date, userID, \u0027returnKey500\u0027]);\n          sheet_Log.appendRow([date, userID, \u0027returnKey500\u0027]);\n          contents \u003d {\n            replyToken: event.replyToken,\n            messages: [{ type: \u0027text\u0027, text: \u0027500人講義室の鍵を返しました。\u0027 }],\n          };\n        }\n        break;\n        \n      case \u0027borrowKeyClubRoom\u0027:\n        if (keyCRoom % 2 !\u003d\u003d 0) {\n          // すでに借りられている時\n          contents \u003d {\n            replyToken: event.replyToken,\n            messages: [{ type: \u0027text\u0027, text: \u0027すでに部室の鍵が借りられています。\u0027 }],\n          };\n        } else {\n          // 鍵を借りる処理\n          sheet_KeyLog.appendRow([date, userID, \u0027borrowKeyClubRoom\u0027]);\n          sheet_Log.appendRow([date, userID, \u0027borrowKeyClubRoom\u0027]);\n          contents \u003d {\n            replyToken: event.replyToken,\n            messages: [{ type: \u0027text\u0027, text: \u0027部室の鍵を借りました。\u0027 }],\n          };\n        }\n        break;\n        \n      case \u0027returnKeyClubRoom\u0027:\n        if (keyCRoom % 2 \u003d\u003d\u003d 0) {\n          // 鍵が借りられていない時\n          contents \u003d {\n            replyToken: event.replyToken,\n            messages: [{ type: \u0027text\u0027, text: \u0027部室の鍵は借りられていません。\u0027 }],\n          };\n        } else {\n          // 鍵を返す処理\n          sheet_KeyLog.appendRow([date, userID, \u0027returnKeyClubRoom\u0027]);\n          sheet_Log.appendRow([date, userID, \u0027returnKeyClubRoom\u0027]);\n          contents \u003d {\n            replyToken: event.replyToken,\n            messages: [{ type: \u0027text\u0027, text: \u0027部室の鍵を返しました。\u0027 }],\n          };\n        }\n        break;\n        \n      default:\n        // 不明なアクション\n        contents \u003d {\n          replyToken: event.replyToken,\n          messages: [{ type: \u0027text\u0027, text: \u0027不明なアクションです。\u0027 }],\n        };\n        break;\n    }\n    \n    // ログに記録\n    sheet_Log.appendRow([date, \u0027borrowAndReturnKey\u0027, key, \u0027Success\u0027]);\n    \n    // 返信関数を呼び出す\n    return contents;\n    \n  } catch (error) {\n    // エラーログに記録\n    try {\n\n      if (sheet_ErrorLog) {\n        sheet_ErrorLog.appendRow([new Date(), \u0027borrowAndReturnKey\u0027, error.toString()]);\n      } else {\n        // ErrorLogシートが存在しない場合、ログを別の方法で記録\n        Logger.log(`Error: ${error.toString()}`);\n      }\n    } catch (err) {\n      // 再度エラーが発生した場合、追加のログを記録\n      Logger.log(`Error while logging error: ${err.toString()}`);\n      // 管理者に再通知（オプション）\n    }\n    \n    // ユーザーにエラーメッセージを返信\n    try {\n      const errorMessage \u003d \"鍵の借用・返却処理中にエラーが発生しました。しばらくしてから再度お試しください。\";\n      const errorContents \u003d {\n        replyToken: event.replyToken,\n        messages: [{ type: \u0027text\u0027, text: errorMessage }],\n      };\n      return errorContents;\n    } catch (err) {\n      // 再度エラーが発生した場合、追加のログを記録\n      try {\n        if (sheet_ErrorLog) {\n          sheet_ErrorLog.appendRow([new Date(), \u0027borrowAndReturnKey_error_reply\u0027, err.toString()]);\n        } else {\n          Logger.log(`Error: ${err.toString()}`);\n        }\n      } catch (innerErr) {\n        Logger.log(`Error while logging reply error: ${innerErr.toString()}`);\n      }\n      // 管理者に再通知（オプション）\n    }\n  }\n}\n"},{"id":"7e5ae697-211d-4ef0-98f3-d39e5f73d3ff","name":"addReminder","type":"html","source":"\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n  \u003chead\u003e\n    \u003cmeta charset\u003d\"UTF-8\"\u003e\n    \u003ctitle\u003eリマインダー登録フォーム\u003c/title\u003e\n    \u003cstyle\u003e\n      /* リセットCSS */\n      * {\n        box-sizing: border-box;\n        margin: 0;\n        padding: 0;\n      }\n\n      body {\n        font-family: Arial, sans-serif;\n        padding: 20px;\n        background-color: #f0f2f5;\n      }\n\n      .container {\n        max-width: 500px;\n        margin: 0 auto;\n        background-color: #fff;\n        padding: 30px;\n        border-radius: 8px;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n      }\n\n      h1 {\n        text-align: center;\n        margin-bottom: 20px;\n        color: #333;\n      }\n\n      form {\n        display: flex;\n        flex-direction: column;\n      }\n\n      label {\n        margin-bottom: 5px;\n        color: #555;\n      }\n\n      input[type\u003d\"text\"],\n      input[type\u003d\"date\"],\n      textarea,\n      input[type\u003d\"button\"] {\n        padding: 10px;\n        margin-bottom: 15px;\n        border: 1px solid #ccc;\n        border-radius: 4px;\n        font-size: 16px;\n      }\n\n      textarea {\n        resize: vertical;\n        min-height: 100px; /* 縦に広げるための最低高さ */\n      }\n\n      input[type\u003d\"button\"] {\n        background-color: #28a745;\n        color: #fff;\n        border: none;\n        cursor: pointer;\n        transition: background-color 0.3s ease;\n      }\n\n      input[type\u003d\"button\"]:hover {\n        background-color: #218838;\n      }\n\n      /* メッセージスタイル */\n      .message {\n        padding: 15px;\n        border-radius: 4px;\n        margin-top: 20px;\n        display: none;\n      }\n\n      .success {\n        background-color: #d4edda;\n        color: #155724;\n        border: 1px solid #c3e6cb;\n      }\n\n      .error {\n        background-color: #f8d7da;\n        color: #721c24;\n        border: 1px solid #f5c6cb;\n      }\n\n      /* レスポンシブデザイン */\n      @media (max-width: 600px) {\n        .container {\n          padding: 20px;\n        }\n\n        input[type\u003d\"text\"],\n        input[type\u003d\"date\"],\n        textarea,\n        input[type\u003d\"button\"] {\n          font-size: 14px;\n          padding: 8px;\n        }\n\n        h1 {\n          font-size: 24px;\n        }\n      }\n    \u003c/style\u003e\n  \u003c/head\u003e\n  \u003cbody\u003e\n    \u003cdiv class\u003d\"container\"\u003e\n      \u003ch1\u003eリマインダー登録フォーム\u003c/h1\u003e\n      \n      \u003c!-- 登録フォーム --\u003e\n      \u003cform id\u003d\"addReminderForm\"\u003e\n        \u003c!-- 隠しフィールドの値をGASから渡す --\u003e\n        \u003cinput type\u003d\"hidden\" id\u003d\"userid\" name\u003d\"userid\" value\u003d\"\u003c?\u003d userid ?\u003e\" /\u003e\n        \n        \u003clabel for\u003d\"title\"\u003eタイトル:\u003c/label\u003e\n        \u003cinput type\u003d\"text\" id\u003d\"title\" name\u003d\"title\" required\u003e\n        \n        \u003clabel for\u003d\"date\"\u003e日にち:\u003c/label\u003e\n        \u003cinput type\u003d\"date\" id\u003d\"date\" name\u003d\"date\" required\u003e\n        \n        \u003clabel for\u003d\"body\"\u003e本文:\u003c/label\u003e\n        \u003ctextarea id\u003d\"body\" name\u003d\"body\" required\u003e\u003c/textarea\u003e\n\n        \u003cinput type\u003d\"button\" value\u003d\"送信\" onclick\u003d\"submitForm()\"\u003e\n      \u003c/form\u003e \n      \n      \u003c!-- 登録完了メッセージ --\u003e\n      \u003cdiv id\u003d\"successMessage\" class\u003d\"message success\"\u003e\n        登録が完了しました。\n      \u003c/div\u003e\n      \n      \u003c!-- エラーメッセージ --\u003e\n      \u003cdiv id\u003d\"errorMessage\" class\u003d\"message error\"\u003e\n        登録中にエラーが発生しました。もう一度お試しください。\n      \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cscript\u003e\n      // ページ読み込み時に日付のmin属性を設定\n      document.addEventListener(\"DOMContentLoaded\", function() {\n        const dateInput \u003d document.getElementById(\"date\");\n        const today \u003d new Date();\n        const year \u003d today.getFullYear();\n        const month \u003d String(today.getMonth() + 1).padStart(2, \u00270\u0027);\n        const day \u003d String(today.getDate()).padStart(2, \u00270\u0027);\n        const minDate \u003d `${year}-${month}-${day}`;\n        dateInput.setAttribute(\u0027min\u0027, minDate);\n      });\n\n      function submitForm() {\n        // フォームデータを取得\n        const form \u003d document.getElementById(\"addReminderForm\");\n        const formData \u003d {\n          userid: form.userid.value,\n          title: form.title.value,\n          date: form.date.value,\n          body: form.body.value\n        };\n        \n        // 送信ボタンを無効化して送信中の状態を表示\n        const submitButton \u003d form.querySelector(\"input[type\u003d\u0027button\u0027]\");\n        submitButton.disabled \u003d true;\n        submitButton.value \u003d \"送信中...\";\n        \n        // GASのサーバーサイド関数を呼び出す\n        google.script.run\n          .withSuccessHandler(function(response) {\n            // 登録完了メッセージを表示\n            form.style.display \u003d \"none\";\n            document.getElementById(\"successMessage\").style.display \u003d \"block\";\n          })\n          .withFailureHandler(function(error) {\n            // エラーメッセージを表示\n            document.getElementById(\"errorMessage\").style.display \u003d \"block\";\n            console.error(\"エラー:\", error);\n            // 送信ボタンを再度有効化\n            submitButton.disabled \u003d false;\n            submitButton.value \u003d \"送信\";\n          })\n          .addReminder(formData);\n      }\n    \u003c/script\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n"},{"id":"06c401aa-65bf-4477-a145-5f56bdf2804b","name":"deleteReminder","type":"html","source":"\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n  \u003chead\u003e\n    \u003cmeta charset\u003d\"UTF-8\"\u003e\n    \u003ctitle\u003eリマインダー削除フォーム\u003c/title\u003e\n    \u003cstyle\u003e\n      /* リセットCSS */\n      * {\n        box-sizing: border-box;\n        margin: 0;\n        padding: 0;\n      }\n\n      body {\n        font-family: Arial, sans-serif;\n        padding: 20px;\n        background-color: #f0f2f5;\n      }\n\n      .container {\n        max-width: 700px;\n        margin: 0 auto;\n        background-color: #fff;\n        padding: 30px;\n        border-radius: 8px;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n      }\n\n      h1 {\n        text-align: center;\n        margin-bottom: 20px;\n        color: #333;\n      }\n\n      table {\n        width: 100%;\n        border-collapse: collapse;\n        margin-bottom: 20px;\n      }\n\n      th, td {\n        padding: 12px;\n        border: 1px solid #ccc;\n        text-align: left;\n      }\n\n      th {\n        background-color: #f8f9fa;\n      }\n\n      button.delete-button {\n        background-color: #dc3545;\n        color: #fff;\n        border: none;\n        padding: 8px 12px;\n        border-radius: 4px;\n        cursor: pointer;\n        transition: background-color 0.3s ease;\n      }\n\n      button.delete-button:hover {\n        background-color: #c82333;\n      }\n\n      /* メッセージスタイル */\n      .message {\n        padding: 15px;\n        border-radius: 4px;\n        margin-top: 20px;\n        display: none;\n      }\n\n      .success {\n        background-color: #d4edda;\n        color: #155724;\n        border: 1px solid #c3e6cb;\n      }\n\n      .error {\n        background-color: #f8d7da;\n        color: #721c24;\n        border: 1px solid #f5c6cb;\n      }\n\n      /* レスポンシブデザイン */\n      @media (max-width: 600px) {\n        .container {\n          padding: 20px;\n        }\n\n        table, th, td {\n          font-size: 14px;\n        }\n\n        h1 {\n          font-size: 24px;\n        }\n\n        button.delete-button {\n          padding: 6px 10px;\n          font-size: 14px;\n        }\n      }\n    \u003c/style\u003e\n  \u003c/head\u003e\n  \u003cbody\u003e\n    \u003cdiv class\u003d\"container\"\u003e\n      \u003ch1\u003eリマインダー削除フォーム\u003c/h1\u003e\n      \n      \u003c!-- 隠しフィールドでuseridを保持 --\u003e\n      \u003cinput type\u003d\"hidden\" id\u003d\"userid\" value\u003d\"\u003c?\u003d userid ?\u003e\" /\u003e\n\n      \u003c!-- リマインダー一覧 --\u003e\n      \u003ctable id\u003d\"reminderTable\"\u003e\n        \u003cthead\u003e\n          \u003ctr\u003e\n            \u003cth\u003e日付\u003c/th\u003e\n            \u003cth\u003eタイトル\u003c/th\u003e\n            \u003cth\u003e本文\u003c/th\u003e\n            \u003cth\u003e操作\u003c/th\u003e\n          \u003c/tr\u003e\n        \u003c/thead\u003e\n        \u003ctbody\u003e\n          \u003c!-- リマインダーがここに表示されます --\u003e\n        \u003c/tbody\u003e\n      \u003c/table\u003e\n      \n      \u003c!-- メッセージ表示エリア --\u003e\n      \u003cdiv id\u003d\"successMessage\" class\u003d\"message success\"\u003e\n        リマインダーが削除されました。\n      \u003c/div\u003e\n      \n      \u003cdiv id\u003d\"errorMessage\" class\u003d\"message error\"\u003e\n        削除中にエラーが発生しました。もう一度お試しください。\n      \u003c/div\u003e\n      \n      \u003c!-- リマインダーがない場合のメッセージ --\u003e\n      \u003cdiv id\u003d\"noRemindersMessage\" class\u003d\"message error\"\u003e\n        リマインダーがありません。\n      \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cscript\u003e\n      // ページ読み込み時にリマインダーを取得して表示\n      document.addEventListener(\"DOMContentLoaded\", function() {\n        loadReminders();\n      });\n\n      function loadReminders() {\n        const userid \u003d document.getElementById(\"userid\").value;\n        google.script.run\n        .withSuccessHandler(function(reminders) {\n          console.log(\"取得したリマインダー:\", reminders); // デバッグ用ログ\n\n          if (!reminders) {\n            console.error(\"reminders が null または undefined です\");\n            document.getElementById(\"errorMessage\").textContent \u003d \"リマインダーの取得中にエラーが発生しました。\";\n            document.getElementById(\"errorMessage\").style.display \u003d \"block\";\n            document.getElementById(\"noRemindersMessage\").style.display \u003d \"none\";\n            return;\n          }\n\n          // JSON文字列の場合はオブジェクトに変換\n          if (typeof reminders \u003d\u003d\u003d \"string\") {\n            try {\n              reminders \u003d JSON.parse(reminders);\n            } catch (e) {\n              console.error(\"JSONの解析エラー:\", e);\n              document.getElementById(\"errorMessage\").textContent \u003d \"リマインダーのデータ形式が不正です。\";\n              document.getElementById(\"errorMessage\").style.display \u003d \"block\";\n              document.getElementById(\"noRemindersMessage\").style.display \u003d \"none\";\n              return;\n            }\n          }\n\n          const tbody \u003d document.getElementById(\"reminderTable\").getElementsByTagName(\"tbody\")[0];\n          tbody.innerHTML \u003d \"\"; // 既存の行をクリア\n\n          // メッセージエリアを非表示に\n          document.getElementById(\"errorMessage\").style.display \u003d \"none\";\n          document.getElementById(\"noRemindersMessage\").style.display \u003d \"none\";\n\n          if (reminders.length \u003d\u003d\u003d 0) {\n            // リマインダーがない場合の処理\n            document.getElementById(\"noRemindersMessage\").style.display \u003d \"block\";\n          } else {\n            // リマインダーを表示する処理\n            reminders.forEach(function(reminder) {\n              const row \u003d tbody.insertRow();\n\n              // 日にちを表示（適切なフォーマットに変換）\n              const dateCell \u003d row.insertCell();\n              const date \u003d new Date(reminder.date);\n              dateCell.textContent \u003d date.toLocaleString();\n\n              // タイトルを表示\n              const titleCell \u003d row.insertCell();\n              titleCell.textContent \u003d reminder.title;\n\n              // 本文を表示\n              const bodyCell \u003d row.insertCell();\n              bodyCell.textContent \u003d reminder.body;\n\n              // 操作（削除ボタン）を追加\n              const actionCell \u003d row.insertCell();\n              const deleteButton \u003d document.createElement(\"button\");\n              deleteButton.textContent \u003d \"削除\";\n              deleteButton.className \u003d \"delete-button\";\n              deleteButton.onclick \u003d function() {\n                if (confirm(\"本当にこのリマインダーを削除しますか？\")) {\n                  deleteReminder(reminder.uuid);\n                }\n              };\n              actionCell.appendChild(deleteButton);\n            });\n          }\n        })\n        .withFailureHandler(function(error) {\n          console.error(\"リマインダーの取得エラー:\", error);\n          document.getElementById(\"errorMessage\").textContent \u003d \"リマインダーの取得中にエラーが発生しました。\";\n          document.getElementById(\"errorMessage\").style.display \u003d \"block\";\n          document.getElementById(\"noRemindersMessage\").style.display \u003d \"none\";\n        })\n        .getReminders(userid);\n      }\n\n      function deleteReminder(reminderId) {\n        const userid \u003d document.getElementById(\"userid\").value;\n        google.script.run\n          .withSuccessHandler(function(response) {\n            if (response \u003d\u003d\u003d \"success\") {\n              document.getElementById(\"successMessage\").style.display \u003d \"block\";\n              document.getElementById(\"errorMessage\").style.display \u003d \"none\";\n              document.getElementById(\"noRemindersMessage\").style.display \u003d \"none\";\n              loadReminders(); // リマインダー一覧を再読み込み\n            } else {\n              document.getElementById(\"errorMessage\").textContent \u003d \"削除に失敗しました。\";\n              document.getElementById(\"errorMessage\").style.display \u003d \"block\";\n              document.getElementById(\"successMessage\").style.display \u003d \"none\";\n            }\n          })\n          .withFailureHandler(function(error) {\n            console.error(\"削除エラー:\", error);\n            document.getElementById(\"errorMessage\").textContent \u003d \"削除中にエラーが発生しました。\";\n            document.getElementById(\"errorMessage\").style.display \u003d \"block\";\n            document.getElementById(\"successMessage\").style.display \u003d \"none\";\n          })\n          .deleteReminder(reminderId, userid); // useridを渡す\n\n      }\n    \u003c/script\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n"},{"id":"acbe0c58-5072-4db3-b7f0-799247db1ad4","name":"showReminder","type":"html","source":"\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n  \u003chead\u003e\n    \u003cmeta charset\u003d\"UTF-8\"\u003e\n    \u003ctitle\u003eリマインダー一覧\u003c/title\u003e\n    \u003cstyle\u003e\n      /* リセットCSS */\n      * {\n        box-sizing: border-box;\n        margin: 0;\n        padding: 0;\n      }\n\n      body {\n        font-family: \u0027Segoe UI\u0027, Tahoma, Geneva, Verdana, sans-serif;\n        padding: 20px;\n        background-color: #f0f2f5;\n      }\n\n      .container {\n        max-width: 800px;\n        margin: 0 auto;\n        background-color: #fff;\n        padding: 40px;\n        border-radius: 10px;\n        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n      }\n\n      h1 {\n        text-align: center;\n        margin-bottom: 30px;\n        color: #333;\n        font-size: 28px;\n      }\n\n      .reminder-list {\n        display: flex;\n        flex-direction: column;\n        gap: 20px;\n      }\n\n      .reminder-card {\n        background-color: #fafafa;\n        padding: 20px;\n        border-radius: 8px;\n        border: 1px solid #ddd;\n        transition: box-shadow 0.3s ease;\n      }\n\n      .reminder-card:hover {\n        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\n      }\n\n      .reminder-date {\n        font-size: 16px;\n        color: #555;\n        margin-bottom: 10px;\n      }\n\n      .reminder-title {\n        font-size: 20px;\n        font-weight: bold;\n        color: #333;\n        margin-bottom: 10px;\n      }\n\n      .reminder-body {\n        font-size: 16px;\n        color: #555;\n      }\n\n      /* メッセージスタイル */\n      .message {\n        padding: 20px;\n        border-radius: 5px;\n        margin-top: 20px;\n        display: none;\n        font-size: 16px;\n      }\n\n      .success {\n        background-color: #d4edda;\n        color: #155724;\n        border: 1px solid #c3e6cb;\n      }\n\n      .error {\n        background-color: #f8d7da;\n        color: #721c24;\n        border: 1px solid #f5c6cb;\n      }\n\n      /* レスポンシブデザイン */\n      @media (max-width: 600px) {\n        .container {\n          padding: 20px;\n        }\n\n        h1 {\n          font-size: 24px;\n        }\n\n        .reminder-card {\n          padding: 15px;\n        }\n\n        .reminder-date,\n        .reminder-title,\n        .reminder-body {\n          font-size: 14px;\n        }\n\n        .message {\n          font-size: 14px;\n          padding: 15px;\n        }\n      }\n    \u003c/style\u003e\n  \u003c/head\u003e\n  \u003cbody\u003e\n    \u003cdiv class\u003d\"container\"\u003e\n      \u003ch1\u003eリマインダー一覧\u003c/h1\u003e\n\n      \u003cinput type\u003d\"hidden\" id\u003d\"userid\" value\u003d\"\u003c?\u003d userid ?\u003e\" /\u003e\n\n      \u003c!-- リマインダー一覧 --\u003e\n      \u003cdiv id\u003d\"reminderList\" class\u003d\"reminder-list\"\u003e\n        \u003c!-- リマインダーがここに表示されます --\u003e\n      \u003c/div\u003e\n      \n      \u003c!-- リマインダーがない場合のメッセージ --\u003e\n      \u003cdiv id\u003d\"noRemindersMessage\" class\u003d\"message error\"\u003e\n        リマインダーがありません。\n      \u003c/div\u003e\n\n      \u003c!-- エラーメッセージ --\u003e\n      \u003cdiv id\u003d\"errorMessage\" class\u003d\"message error\"\u003e\u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cscript\u003e\n      // ページ読み込み時にリマインダーを取得して表示\n      document.addEventListener(\"DOMContentLoaded\", function() {\n        loadReminders();\n      });\n\n      function loadReminders() {\n        const userid \u003d document.getElementById(\"userid\").value;\n        google.script.run\n        .withSuccessHandler(function(reminders) {\n          console.log(\"取得したリマインダー:\", reminders); // デバッグ用ログ\n\n          if (!reminders) {\n            console.error(\"reminders が null または undefined です\");\n            displayError(\"リマインダーの取得中にエラーが発生しました。\");\n            return;\n          }\n\n          // JSON文字列の場合はオブジェクトに変換\n          if (typeof reminders \u003d\u003d\u003d \"string\") {\n            try {\n              reminders \u003d JSON.parse(reminders);\n            } catch (e) {\n              console.error(\"JSONの解析エラー:\", e);\n              displayError(\"リマインダーのデータ形式が不正です。\");\n              return;\n            }\n          }\n\n          const reminderList \u003d document.getElementById(\"reminderList\");\n          reminderList.innerHTML \u003d \"\"; // 既存のリマインダーをクリア\n\n          // メッセージエリアを非表示に\n          document.getElementById(\"errorMessage\").style.display \u003d \"none\";\n          document.getElementById(\"noRemindersMessage\").style.display \u003d \"none\";\n\n          if (reminders.length \u003d\u003d\u003d 0) {\n            // リマインダーがない場合の処理\n            document.getElementById(\"noRemindersMessage\").style.display \u003d \"block\";\n          } else {\n            // リマインダーを表示する処理\n            reminders.forEach(function(reminder) {\n              const card \u003d document.createElement(\"div\");\n              card.className \u003d \"reminder-card\";\n\n              // 日付を表示（時刻を除く）\n              const date \u003d new Date(reminder.date);\n              const options \u003d { year: \u0027numeric\u0027, month: \u0027short\u0027, day: \u0027numeric\u0027 };\n              const dateStr \u003d date.toLocaleDateString([], options);\n\n              const dateElem \u003d document.createElement(\"div\");\n              dateElem.className \u003d \"reminder-date\";\n              dateElem.textContent \u003d dateStr;\n              card.appendChild(dateElem);\n\n              // タイトルを表示\n              const titleElem \u003d document.createElement(\"div\");\n              titleElem.className \u003d \"reminder-title\";\n              titleElem.textContent \u003d reminder.title;\n              card.appendChild(titleElem);\n\n              // 本文を表示\n              const bodyElem \u003d document.createElement(\"div\");\n              bodyElem.className \u003d \"reminder-body\";\n              bodyElem.textContent \u003d reminder.body;\n              card.appendChild(bodyElem);\n\n              reminderList.appendChild(card);\n            });\n          }\n        })\n        .withFailureHandler(function(error) {\n          console.error(\"リマインダーの取得エラー:\", error);\n          displayError(\"リマインダーの取得中にエラーが発生しました。\");\n        })\n        .getAllReminders(userid);\n      }\n\n      // エラーメッセージを表示する関数\n      function displayError(message) {\n        const errorDiv \u003d document.getElementById(\"errorMessage\");\n        errorDiv.textContent \u003d message;\n        errorDiv.style.display \u003d \"block\";\n        document.getElementById(\"noRemindersMessage\").style.display \u003d \"none\";\n      }\n    \u003c/script\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n"},{"id":"11e9f020-824f-4d26-9ec0-72f45b0b55c6","name":"rollCall","type":"server_js","source":"function handleRollCall(event) {\n\n  if(event.type \u003d\u003d\u003d \u0027message\u0027){\n    return rollCall(event)\n  }else if(event.type \u003d\u003d\u003d \u0027postback\u0027){\n    return addRollCall(event);\n  } \n}\n\nfunction handleRollCallGET(e) {\n  const operation \u003d e.parameter[\"operation\"];\n  const userid \u003d e.parameter[\"userid\"];\n  sheet_Log.appendRow([new Date(),\"GET\", \"handleRollCallGET\", operation, userid]);\n  switch (operation) {\n    case \"add\":\n      return handleMonthlyAttendance(userid);\n    case \"show\":\n      return createShowAttendancePage();\n    default:\n      return HtmlService.createHtmlOutput(`\u003ch1\u003e無効な操作です。\u003c/h1\u003e`);\n  }\n}\n\nfunction rollCall(event) {\n  const timestamp \u003d Utilities.formatDate(new Date(), \"Asia/Tokyo\", \"yyyy/MM/dd\");\n  const userID  \u003d event.source.userId;\n  const rollCallContent \u003d{\n    \"type\": \"template\",\n    \"altText\": `今日(${timestamp})の練習出席する？`,\n    \"template\": {\n        \"type\": \"confirm\",\n        \"text\": `今日(${timestamp})の練習出席する？`,\n        \"actions\": [\n            {\n              \"type\": \"postback\",\n              \"label\": \"yes\",\n              \"data\": `rollcall-${userID}-${timestamp}-yes`\n            },\n            {\n              \"type\": \"postback\",\n              \"label\": \"no\",\n              \"data\": `rollcall-${userID}-${timestamp}-no`\n            }\n        ]\n    }\n  }\n\n  const addRollCallcontent \u003d {\n    \"type\": \"template\",\n    \"altText\": \"出欠を複数日程登録する場合はこちら\",\n    \"template\": {\n      \"type\": \"buttons\",\n      \"title\": \"出欠の登録\",\n      \"text\": \"出欠を複数日程登録する場合はこちら\",\n      \"actions\": [\n        {\n          \"type\": \"uri\",\n          \"label\": \"出欠の登録\",\n          \"uri\": `${URL}?path\u003drollcall\u0026operation\u003dadd\u0026userid\u003d${userID}`,\n        }\n      ]\n    }\n  }\n\n  const showRollCallcontent \u003d {\n    \"type\": \"template\",\n    \"altText\": \"出欠の確認\",\n    \"template\": {\n      \"type\": \"buttons\",\n      \"title\": \"出欠の確認\",\n      \"text\": \"他の人の出欠を確認する\",\n      \"actions\": [\n        {\n          \"type\": \"uri\",\n          \"label\": \"出欠状況の確認\",\n          \"uri\": `${URL}?path\u003drollcall\u0026operation\u003dshow\u0026userid\u003d${userID}`,\n        }\n      ]\n    }\n  }\n\n  rollCallContent\n\n  var contents \u003d {\n    replyToken: event.replyToken,\n    messages: [rollCallContent, addRollCallcontent, showRollCallcontent]\n  }\n  return contents;\n}\n\nfunction getAttendanceByDate() {\n  const data \u003d sheet_Attendance.getDataRange().getValues(); // 全データを取得\n  Logger.log(`Total Rows in Sheet: ${data.length}`);\n\n  const attendanceByDate \u003d {};\n\n  for (let i \u003d 1; i \u003c data.length; i++) { // ヘッダーを除く\n    const row \u003d data[i];\n    const userID \u003d row[1]?.toString().trim(); // UserID\n    const status \u003d row[2]?.toString().trim(); // 出席/欠席\n    const date \u003d Utilities.formatDate(new Date(row[3]), \"Asia/Tokyo\", \"yyyy/MM/dd\"); // 日付\n\n    if (!userID || !status || !date) continue;\n\n    if (!attendanceByDate[date]) {\n      attendanceByDate[date] \u003d {\n        attendees: [],\n        absentees: []\n      };\n    }\n\n    if (status \u003d\u003d\u003d \"出席\") {\n      attendanceByDate[date].attendees.push(userID);\n    } else if (status \u003d\u003d\u003d \"欠席\") {\n      attendanceByDate[date].absentees.push(userID);\n    }\n  }\n\n  return attendanceByDate;\n}\n\n/**\n * 全員分の先1ヶ月の出欠情報を表示するウェブページを作成する関数\n * @returns {HtmlOutput} - 出欠状況表示ページのHTML\n */\nfunction createShowAttendancePage() {\n  try {\n    sheet_Log.appendRow([new Date(), \"GET\", \"createShowAttendancePage\", \"\"]);\n\n    const latestAttendance \u003d getLatestAttendanceByDate();\n    const userIdToNameMap \u003d getUserIdToNameMap();\n\n    const attendanceByDate \u003d {};\n\n    for (const date in latestAttendance) {\n      attendanceByDate[date] \u003d {\n        attendees: [],\n        absentees: []\n      };\n\n      for (const userID in latestAttendance[date]) {\n        const userName \u003d userIdToNameMap[userID] || userID; // 名前がない場合はIDを表示\n        const status \u003d latestAttendance[date][userID].status;\n\n        if (status \u003d\u003d\u003d \"出席\") {\n          attendanceByDate[date].attendees.push(userName);\n        } else if (status \u003d\u003d\u003d \"欠席\") {\n          attendanceByDate[date].absentees.push(userName);\n        }\n      }\n    }\n\n    const template \u003d HtmlService.createTemplateFromFile(\u0027showAttendance\u0027);\n    template.attendanceByDate \u003d attendanceByDate;\n\n    return template.evaluate()\n      .setTitle(\"出欠情報\")\n      .addMetaTag(\u0027viewport\u0027, \u0027width\u003ddevice-width, initial-scale\u003d1\u0027);\n  } catch (error) {\n    Logger.log(`createShowAttendancePage エラー: ${error.message}`);\n    return HtmlService.createHtmlOutput(`\n      \u003ch1\u003eエラーが発生しました\u003c/h1\u003e\n      \u003cp\u003e出欠情報の表示中に問題が発生しました。後ほど再試行してください。\u003c/p\u003e\n      \u003cp\u003e詳細: ${error.message}\u003c/p\u003e\n    `).setTitle(\"エラー\");\n  }\n}\n\nfunction getLatestAttendanceByDate() {\n  const data \u003d sheet_Attendance.getDataRange().getValues(); // 全データを取得\n  Logger.log(`Total Rows in Sheet: ${data.length}`);\n\n  const latestAttendance \u003d {};\n\n  for (let i \u003d 1; i \u003c data.length; i++) { // ヘッダーを除く\n    const row \u003d data[i];\n    const timestamp \u003d new Date(row[0]); // Timestamp\n    const userID \u003d row[1]?.toString().trim(); // UserID\n    const status \u003d row[2]?.toString().trim(); // 出席/欠席\n    const date \u003d Utilities.formatDate(new Date(row[3]), \"Asia/Tokyo\", \"yyyy/MM/dd\"); // 日付\n\n    if (!userID || !status || !date) continue;\n\n    if (!latestAttendance[date]) {\n      latestAttendance[date] \u003d {};\n    }\n\n    // ユーザー単位で最新のデータを更新\n    if (!latestAttendance[date][userID] || latestAttendance[date][userID].timestamp \u003c timestamp) {\n      latestAttendance[date][userID] \u003d {\n        timestamp,\n        status\n      };\n    }\n  }\n\n  return latestAttendance;\n}\n\nfunction getLatestAttendance() {\n  const data \u003d sheet_Attendance.getDataRange().getValues(); // 全データを取得\n  Logger.log(`Total Rows in Sheet: ${data.length}`);\n\n  const latestData \u003d {};\n\n  for (let i \u003d 1; i \u003c data.length; i++) { // ヘッダーをスキップ\n    const row \u003d data[i];\n    const timestamp \u003d new Date(row[0]); // Timestamp\n    const userID \u003d row[1];             // UserID\n    const status \u003d row[2];             // 出席/欠席\n    const date \u003d row[3];               // 日付\n\n    const key \u003d `${userID}-${date}`; // UserID と 日付をキーにする\n\n    // 最新の Timestamp を保持\n    if (!latestData[key] || latestData[key].timestamp \u003c timestamp) {\n      latestData[key] \u003d {\n        timestamp: timestamp,\n        userID: userID,\n        status: status,\n        date: date\n      };\n    }\n  }\n\n  return Object.values(latestData); // 最新データの配列を返す\n}\n\nfunction addRollCall(event){\n  const parts \u003d event.postback.data.split(\u0027-\u0027);\n  if (parts.length !\u003d\u003d 4) {\n    return \"データ形式が不正です。\";\n  }\n\n  const userID \u003d parts[1];\n  const timestampStr \u003d parts[2]; // \"yyyy/MM/dd\"\n  const status \u003d parts[3]; // \"yes\" または \"no\"\n\n  // 日付をDateオブジェクトに変換\n  const date \u003d new Date(timestampStr);\n\n  // TimestampをMM/dd形式にフォーマット\n  const timestamp \u003d Utilities.formatDate(date, \"Asia/Tokyo\", \"MM/dd\");\n\n  // Statusを日本語に変換\n  const statusText \u003d status \u003d\u003d\u003d \"yes\" ? \"出席\" : \"欠席\";\n\n  // スプレッドシートに追加\n  sheet_Attendance.appendRow([new Date(), userID, statusText, timestampStr]);\n\n  return \"出欠を登録しました！\";\n}\n\n\n/**\n * 直近1ヶ月の出欠情報を入力するウェブページを表示する関数\n * @param {string} userID - ユーザーID\n * @returns {HtmlOutput} - 出欠入力フォームのHTMLページ\n */\nfunction handleMonthlyAttendance(userID) {\n  try {\n    sheet_Log.appendRow([\n      Utilities.formatDate(new Date(), \"Asia/Tokyo\", \"MM/dd HH:mm:ss\"),\n      \"GET\",\n      \"createMonthlyAttendancePage\",\n      `userid: ${userID}`\n    ]);\n\n    // HTMLテンプレートを取得し、userIDと今日から1ヶ月後までの日付リストを設定\n    const template \u003d HtmlService.createTemplateFromFile(\u0027monthlyAttendance\u0027);\n    template.userid \u003d userID;\n    template.dates \u003d getFutureMonthDates(); // 今日から1ヶ月後までの日付リストを取得\n\n    // 既存の出欠情報を取得\n    const existingData \u003d getExistingAttendance(userID, template.dates.map(d \u003d\u003e d.formattedDate));\n    template.existingAttendance \u003d existingData;\n\n    return template.evaluate()\n                   .setTitle(\"月間出欠登録\")\n                   .addMetaTag(\u0027viewport\u0027, \u0027width\u003ddevice-width, initial-scale\u003d1\u0027);\n  } catch (error) {\n    Logger.log(`createMonthlyAttendancePage エラー: ${error.toString()}`);\n    sheet_Log.appendRow([\n      Utilities.formatDate(new Date(), \"Asia/Tokyo\", \"MM/dd HH:mm:ss\"),\n      \"ERROR\",\n      \"createMonthlyAttendancePage\",\n      error.toString()\n    ]);\n\n    return HtmlService.createHtmlOutput(`\n      \u003ch1\u003eエラーが発生しました\u003c/h1\u003e\n      \u003cp\u003e月間出欠登録ページの作成中に問題が発生しました。後ほど再試行してください。\u003c/p\u003e\n      \u003cp\u003e詳細: ${error.message}\u003c/p\u003e\n    `).setTitle(\"エラー\");\n  }\n}\n\n/**\n * 今日から1ヶ月後までの日付リストを取得する関数\n * @returns {Array} - 日付オブジェクトの配列（formattedDate, displayDate, dayOfWeek）\n */\n/**\n * 今日から1ヶ月後までの日付リストを取得する関数\n * 年次を跨ぐ場合を正確に処理\n * @returns {Array} - 日付オブジェクトの配列（formattedDate, displayDate, dayOfWeek）\n */\nfunction getFutureMonthDates() {\n  const dates \u003d [];\n  const today \u003d new Date();\n  \n  for (let i \u003d 0; i \u003c 30; i++) { // 今日から30日後まで\n    const date \u003d new Date(today);\n    date.setDate(today.getDate() + i); // 日付を進める\n\n    // 年次の跨ぎを考慮してフォーマット\n    const year \u003d date.getFullYear();\n    const month \u003d (\u00270\u0027 + (date.getMonth() + 1)).slice(-2); // 月は0始まり\n    const day \u003d (\u00270\u0027 + date.getDate()).slice(-2);\n\n    const formattedDate \u003d `${year}/${month}/${day}`; // 年月日形式\n    const displayDate \u003d `${month}/${day}`; // MM/DD形式\n    const dayOfWeek \u003d [\u0027日\u0027, \u0027月\u0027, \u0027火\u0027, \u0027水\u0027, \u0027木\u0027, \u0027金\u0027, \u0027土\u0027][date.getDay()]; // 曜日を日本語で取得\n\n    dates.push({\n      formattedDate: formattedDate,\n      displayDate: displayDate,\n      dayOfWeek: dayOfWeek,\n    });\n  }\n\n  return dates;\n}\n\n/**\n * 既存の出欠情報を取得する関数\n * @param {string} userID - ユーザーID\n * @param {Array} dateList - 日付の配列（\u0027yyyy/MM/dd\u0027）\n * @returns {Object} - 既存の出欠情報 { \u0027yyyy/MM/dd\u0027: \u0027出席\u0027/\u0027欠席\u0027/\u0027未定\u0027 }\n */\nfunction getExistingAttendance(userID, dateList) {\n  sheet_Log.appendRow([\n    Utilities.formatDate(new Date(), \"Asia/Tokyo\", \"yyyy/MM/dd HH:mm:ss\"),\n    \"GET\",\n    \"getExistingAttendance\",\n    `userid: ${userID}`,\n    JSON.stringify(dateList)\n  ]);\n\n  const attendanceData \u003d {};\n  const data \u003d sheet_Attendance.getDataRange().getValues();\n  Logger.log(`Total Rows in Sheet: ${data.length}`);\n\n  for (let i \u003d 1; i \u003c data.length; i++) { // ヘッダーを除く\n    const rowUserID \u003d data[i][1]?.toString().trim(); // UserID列\n    const rowDateRaw \u003d data[i][3]; // Date列\n    const rowStatus \u003d data[i][2]?.toString().trim(); // Status列\n\n    if (!rowUserID || !rowStatus || !rowDateRaw) {\n      Logger.log(`Skipping empty or invalid row ${i}`);\n      continue;\n    }\n\n    let rowDate;\n    try {\n      rowDate \u003d Utilities.formatDate(new Date(rowDateRaw), \"Asia/Tokyo\", \"yyyy/MM/dd\");\n    } catch (error) {\n      Logger.log(`Error parsing date for row ${i}: ${rowDateRaw}`);\n      continue;\n    }\n\n    if (!dateList.includes(rowDate)) {\n      Logger.log(`Row ${i}: Date ${rowDate} not in dateList`);\n      continue;\n    }\n\n    if (rowUserID \u003d\u003d\u003d userID) {\n      attendanceData[rowDate] \u003d rowStatus;\n      Logger.log(`Row ${i}: Added ${rowDate} -\u003e ${rowStatus}`);\n    }\n  }\n\n  sheet_Log.appendRow([\n    Utilities.formatDate(new Date(), \"Asia/Tokyo\", \"yyyy/MM/dd HH:mm:ss\"),\n    \"GET\",\n    \"getExistingAttendance\",\n    `Final Attendance Data: ${JSON.stringify(attendanceData)}`\n  ]);\n\n  return attendanceData;\n}\n\n\n/**\n * カレンダーイベントを取得する関数\n * @param {Array} dateList - \u0027yyyy/MM/dd\u0027形式の日付配列\n * @returns {Object} - 各日付に対応するイベント情報 { \u0027yyyy/MM/dd\u0027: \u0027イベント詳細\u0027 }\n */\nfunction getEventsForDates(dateList) {\n  const calendar \u003d CalendarApp.getCalendarById(\u0027kitsocalender@gmail.com\u0027); // カレンダーID\n  const eventsByDate \u003d {};\n\n  dateList.forEach(dateString \u003d\u003e {\n    const date \u003d new Date(dateString);\n    const events \u003d calendar.getEventsForDay(date);\n\n    if (events.length \u003e 0) {\n      eventsByDate[dateString] \u003d events.map(event \u003d\u003e {\n        const startTime \u003d Utilities.formatDate(event.getStartTime(), \"Asia/Tokyo\", \"HH:mm\");\n        const endTime \u003d Utilities.formatDate(event.getEndTime(), \"Asia/Tokyo\", \"HH:mm\");\n        return `${startTime}～${endTime} ${event.getTitle()}`;\n      }).join(\"\\n\");\n    } else {\n      eventsByDate[dateString] \u003d \"予定なし\";\n    }\n  });\n\n  return eventsByDate;\n}\n\n/**\n * 直近1ヶ月の出欠情報を入力するウェブページを表示する関数\n * @param {string} userID - ユーザーID\n * @returns {HtmlOutput} - 出欠入力フォームのHTMLページ\n */\nfunction handleMonthlyAttendance(userID) {\n  try {\n    sheet_Log.appendRow([\n      Utilities.formatDate(new Date(), \"Asia/Tokyo\", \"MM/dd HH:mm:ss\"),\n      \"GET\",\n      \"createMonthlyAttendancePage\",\n      `userid: ${userID}`\n    ]);\n\n    // 日付リストを取得\n    const dates \u003d getFutureMonthDates();\n    const dateList \u003d dates.map(d \u003d\u003e d.formattedDate);\n\n    // イベント情報を取得\n    const calendarEvents \u003d getEventsForDates(dateList);\n\n    // HTMLテンプレートを準備\n    const template \u003d HtmlService.createTemplateFromFile(\u0027monthlyAttendance\u0027);\n    template.userid \u003d userID;\n    template.dates \u003d dates; // 日付リスト\n    template.calendarEvents \u003d calendarEvents; // カレンダーイベント\n    template.existingAttendance \u003d getExistingAttendance(userID, dateList); // 既存の出欠情報\n\n    return template.evaluate()\n                   .setTitle(\"月間出欠登録\")\n                   .addMetaTag(\u0027viewport\u0027, \u0027width\u003ddevice-width, initial-scale\u003d1\u0027);\n  } catch (error) {\n    Logger.log(`createMonthlyAttendancePage エラー: ${error.toString()}`);\n    sheet_Log.appendRow([\n      Utilities.formatDate(new Date(), \"Asia/Tokyo\", \"MM/dd HH:mm:ss\"),\n      \"ERROR\",\n      \"createMonthlyAttendancePage\",\n      error.toString()\n    ]);\n\n    return HtmlService.createHtmlOutput(`\n      \u003ch1\u003eエラーが発生しました\u003c/h1\u003e\n      \u003cp\u003e月間出欠登録ページの作成中に問題が発生しました。後ほど再試行してください。\u003c/p\u003e\n      \u003cp\u003e詳細: ${error.message}\u003c/p\u003e\n    `).setTitle(\"エラー\");\n  }\n}\n\n\nfunction submitMonthlyAttendance(formData) {\n  try {\n    logMessage(\"Received formData: \" + JSON.stringify(formData));\n\n    const userId \u003d formData.userid;\n    const attendanceData \u003d formData.attendance;\n\n    if (!userId || !attendanceData) {\n      throw new Error(\"ユーザーIDまたは出欠データが不足しています。\");\n    }\n\n    const additions \u003d [];\n    const sheet \u003d sheet_Attendance;\n\n    if (!sheet) {\n      throw new Error(\"スプレッドシートが正しく設定されていません。\");\n    }\n\n    for (const [date, status] of Object.entries(attendanceData)) {\n      // 日付が文字列の場合、Dateオブジェクトに変換\n      let parsedDate \u003d new Date(date);\n      if (isNaN(parsedDate)) {\n        throw new Error(`Invalid date format: ${date}`);\n      }\n\n      const formattedDate \u003d Utilities.formatDate(parsedDate, \"Asia/Tokyo\", \"yyyy/MM/dd\");\n      const statusText \u003d status \u003d\u003d\u003d \"yes\" ? \"出席\" : \"欠席\";\n\n      additions.push([new Date(), userId, statusText, formattedDate]);\n    }\n\n    if (additions.length \u003e 0) {\n      const lastRow \u003d sheet.getLastRow();\n      const range \u003d sheet.getRange(lastRow + 1, 1, additions.length, additions[0].length);\n\n      logMessage(`Writing data to rows ${lastRow + 1} - ${lastRow + additions.length}`);\n      logMessage(\"Data being written: \" + JSON.stringify(additions));\n\n      range.setValues(additions);\n    } else {\n      logMessage(\"追加するデータがありません。\");\n    }\n\n    logMessage(`Successfully added ${additions.length} rows.`);\n    return \"success\";\n\n  } catch (error) {\n    logMessage(`submitMonthlyAttendance エラー: ${error.message}`);\n    return `エラー: ${error.message}`;\n  }\n}\n\n/**\n * ログメッセージをsheet_Logに記録する関数\n * @param {string} message - ログメッセージ\n */\nfunction logMessage(message) {\n  try {\n    const logSheet \u003d sheet_Log; // ログ用のスプレッドシート\n    if (!logSheet) {\n      throw new Error(\"ログ用スプレッドシートが設定されていません。\");\n    }\n\n    const timestamp \u003d new Date();\n    const lastRow \u003d logSheet.getLastRow();\n    logSheet.getRange(lastRow + 1, 1, 1, 2).setValues([[timestamp, message]]);\n  } catch (error) {\n    // ログ書き込みエラーは無視して標準のLoggerに記録\n    Logger.log(`logMessage エラー: ${error.message}`);\n  }\n}\n\n/**\n * 曜日を日本語で取得する関数\n * @param {Date} date - 日付\n * @returns {string} - 日本語の曜日 (例: \u0027月\u0027, \u0027火\u0027, \u0027水\u0027, \u0027木\u0027, \u0027金\u0027, \u0027土\u0027, \u0027日\u0027)\n */\nfunction getDayOfWeekJP(date) {\n  const dayOfWeek \u003d date.getDay();\n  const daysOfWeekJP \u003d [\u0027日\u0027, \u0027月\u0027, \u0027火\u0027, \u0027水\u0027, \u0027木\u0027, \u0027金\u0027, \u0027土\u0027];\n  return daysOfWeekJP[dayOfWeek];\n}"},{"id":"ffb1755e-94de-42e0-a9c7-cfcf173a444a","name":"monthlyAttendance","type":"html","source":"\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n  \u003chead\u003e\n    \u003cmeta charset\u003d\"UTF-8\"\u003e\n    \u003ctitle\u003e月間出欠登録フォーム\u003c/title\u003e\n    \u003cstyle\u003e\n      /* CSSスタイルは変更なし */\n      body {\n        font-family: Arial, sans-serif;\n        padding: 20px;\n        background-color: #f0f2f5;\n      }\n\n      .container {\n        max-width: 800px;\n        margin: 0 auto;\n        background-color: #fff;\n        padding: 30px;\n        border-radius: 8px;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n      }\n\n      h1 {\n        text-align: center;\n        margin-bottom: 20px;\n        color: #333;\n      }\n\n      table {\n        width: 100%;\n        border-collapse: collapse;\n        margin-bottom: 20px;\n      }\n\n      th, td {\n        padding: 10px;\n        border: 1px solid #ccc;\n        text-align: center;\n      }\n\n      th {\n        background-color: #f8f9fa;\n      }\n\n      .holiday {\n        background-color: #e9ecef;\n        color: #6c757d;\n      }\n\n      input[type\u003d\"radio\"] {\n        margin-right: 5px;\n      }\n\n      input[type\u003d\"button\"] {\n        background-color: #28a745;\n        color: #fff;\n        border: none;\n        padding: 10px 20px;\n        border-radius: 4px;\n        cursor: pointer;\n        transition: background-color 0.3s ease;\n        font-size: 16px;\n      }\n\n      input[type\u003d\"button\"]:hover {\n        background-color: #218838;\n      }\n\n      .message {\n        padding: 15px;\n        border-radius: 4px;\n        margin-top: 20px;\n        display: none;\n      }\n\n      .success {\n        background-color: #d4edda;\n        color: #155724;\n        border: 1px solid #c3e6cb;\n      }\n\n      .error {\n        background-color: #f8d7da;\n        color: #721c24;\n        border: 1px solid #f5c6cb;\n      }\n    \u003c/style\u003e\n  \u003c/head\u003e\n  \u003cbody\u003e\n    \u003cdiv class\u003d\"container\"\u003e\n      \u003ch1\u003e月間出欠登録フォーム\u003c/h1\u003e\n      \u003cform id\u003d\"monthlyAttendanceForm\"\u003e\n        \u003cinput type\u003d\"hidden\" id\u003d\"userid\" name\u003d\"userid\" value\u003d\"\u003c?\u003d userid ?\u003e\"\u003e\n\n        \u003ctable\u003e\n          \u003cthead\u003e\n            \u003ctr\u003e\n              \u003cth\u003e日付\u003c/th\u003e\n              \u003cth\u003e出欠\u003c/th\u003e\n              \u003cth\u003e予定\u003c/th\u003e\n            \u003c/tr\u003e\n          \u003c/thead\u003e\n          \u003ctbody\u003e\n            \u003c? for (var i \u003d 0; i \u003c dates.length; i++) { \n                 var date \u003d dates[i];\n                 var formattedDate \u003d date.formattedDate;\n                 var displayDate \u003d date.displayDate;\n                 var dayOfWeek \u003d date.dayOfWeek; // 曜日 (\u0027日\u0027, \u0027月\u0027, \u0027火\u0027, ...)\n                 var isHoliday \u003d (dayOfWeek \u003d\u003d\u003d \"土\" || dayOfWeek \u003d\u003d\u003d \"日\"); // 土曜・日曜を判定\n                 var rowClass \u003d isHoliday ? \"holiday\" : \"\"; // 休日クラスを設定\n                 var events \u003d calendarEvents[formattedDate] || \"予定なし\"; // カレンダーのイベント情報\n            ?\u003e\n              \u003ctr class\u003d\"\u003c?\u003d rowClass ?\u003e\"\u003e\n                \u003ctd\u003e\u003c?\u003d displayDate ?\u003e (\u003c?\u003d dayOfWeek ?\u003e)\u003c/td\u003e\n                \u003ctd\u003e\n                  \u003clabel\u003e\n                    \u003cinput type\u003d\"radio\" name\u003d\"attendance[\u003c?\u003d formattedDate ?\u003e]\" value\u003d\"yes\" \u003c?\u003d existingAttendance[formattedDate] \u003d\u003d\u003d \"出席\" ? \"checked\" : \"\" ?\u003e\u003e\n                    出席\n                  \u003c/label\u003e\n                  \u003clabel\u003e\n                    \u003cinput type\u003d\"radio\" name\u003d\"attendance[\u003c?\u003d formattedDate ?\u003e]\" value\u003d\"no\" \u003c?\u003d existingAttendance[formattedDate] \u003d\u003d\u003d \"欠席\" ? \"checked\" : \"\" ?\u003e\u003e\n                    欠席\n                  \u003c/label\u003e\n                \u003c/td\u003e\n                \u003ctd\u003e\u003c?\u003d events ?\u003e\u003c/td\u003e\n              \u003c/tr\u003e\n            \u003c? } ?\u003e\n          \u003c/tbody\u003e\n        \u003c/table\u003e\n\n        \u003cinput type\u003d\"button\" value\u003d\"送信\" onclick\u003d\"submitForm()\"\u003e\n      \u003c/form\u003e\n\n      \u003cdiv id\u003d\"successMessage\" class\u003d\"message success\"\u003e\n        出欠情報が正常に登録されました。ありがとうございます！\n      \u003c/div\u003e\n\n      \u003cdiv id\u003d\"errorMessage\" class\u003d\"message error\"\u003e\n        登録中にエラーが発生しました。もう一度お試しください。\n      \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cscript\u003e\n      function submitForm() {\n        const form \u003d document.getElementById(\"monthlyAttendanceForm\");\n        const formData \u003d {\n          userid: form.userid.value,\n          attendance: {}\n        };\n\n        // テーブルから出欠データを取得\n        const rows \u003d form.querySelectorAll(\"tbody tr\");\n        rows.forEach(row \u003d\u003e {\n          const dateCell \u003d row.querySelector(\"td:nth-child(1)\").textContent; // \"MM/DD (曜日)\"\n          const radios \u003d row.querySelectorAll(\"input[type\u003d\u0027radio\u0027]\");\n          let selectedStatus \u003d \u0027\u0027;\n\n          // 選択されたラジオボタンの値を取得\n          radios.forEach(radio \u003d\u003e {\n            if (radio.checked) {\n              selectedStatus \u003d radio.value;\n            }\n          });\n\n          if (selectedStatus) {\n            // 日付をMM/DD形式からyyyy/MM/dd形式に変換\n            const dateMatch \u003d dateCell.match(/(\\d{2})\\/(\\d{2})/); // MM/DD抽出\n            if (dateMatch) {\n              const currentYear \u003d new Date().getFullYear();\n              const month \u003d parseInt(dateMatch[1], 10); // 月\n              const day \u003d parseInt(dateMatch[2], 10); // 日\n              let year \u003d currentYear;\n\n              // 11月、12月の日付の場合\n              if (month \u003c new Date().getMonth() + 1 \u0026\u0026 month \u003c\u003d 2) {\n                year +\u003d 1; // 翌年\n              }\n\n              // フォーマット済みの日付を生成\n              const formattedDate \u003d `${year}/${month.toString().padStart(2, \u00270\u0027)}/${day.toString().padStart(2, \u00270\u0027)}`;\n              formData.attendance[formattedDate] \u003d selectedStatus;\n            }\n          }\n        });\n\n        // バリデーション\n        if (Object.keys(formData.attendance).length \u003d\u003d\u003d 0) {\n          alert(\"少なくとも1つの出欠を選択してください。\");\n          return;\n        }\n\n        // 送信ボタンを無効化\n        const submitButton \u003d form.querySelector(\"input[type\u003d\u0027button\u0027]\");\n        submitButton.disabled \u003d true;\n        submitButton.value \u003d \"送信中...\";\n\n        // サーバーサイド関数を呼び出す\n        google.script.run\n          .withSuccessHandler(response \u003d\u003e {\n            if (response \u003d\u003d\u003d \"success\") {\n              form.style.display \u003d \"none\";\n              document.getElementById(\"successMessage\").style.display \u003d \"block\";\n            } else {\n              document.getElementById(\"errorMessage\").textContent \u003d response;\n              document.getElementById(\"errorMessage\").style.display \u003d \"block\";\n              submitButton.disabled \u003d false;\n              submitButton.value \u003d \"送信\";\n            }\n          })\n          .withFailureHandler(error \u003d\u003e {\n            document.getElementById(\"errorMessage\").style.display \u003d \"block\";\n            console.error(\"エラー:\", error);\n            submitButton.disabled \u003d false;\n            submitButton.value \u003d \"送信\";\n          })\n          .submitMonthlyAttendance(formData);\n      }\n    \u003c/script\u003e\n  \u003c/body\u003e\n\u003c/html\u003e"},{"id":"abe9ed4e-b685-4a59-84bd-b54fbda41272","name":"showAttendance","type":"html","source":"\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n  \u003chead\u003e\n    \u003cmeta charset\u003d\"UTF-8\"\u003e\n    \u003ctitle\u003e出欠情報\u003c/title\u003e\n    \u003cstyle\u003e\n      body {\n        font-family: Arial, sans-serif;\n        padding: 20px;\n        background-color: #f8f9fa;\n        margin: 0;\n      }\n\n      .container {\n        max-width: 800px;\n        margin: 0 auto;\n        background-color: #fff;\n        padding: 20px;\n        border-radius: 10px;\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n      }\n\n      h1 {\n        text-align: center;\n        font-size: 24px;\n        color: #333;\n        margin-bottom: 20px;\n      }\n\n      .date-section {\n        margin-bottom: 20px;\n        padding: 15px;\n        border-radius: 8px;\n        background-color: #fdfdfd;\n        border: 1px solid #ddd;\n      }\n\n      .date-title {\n        font-size: 18px;\n        font-weight: bold;\n        color: #0056b3;\n        margin-bottom: 10px;\n        border-bottom: 1px solid #ccc;\n        padding-bottom: 5px;\n      }\n\n      .attendance-category {\n        font-weight: bold;\n        margin-top: 10px;\n        margin-bottom: 5px;\n        color: #495057;\n      }\n\n      .attendance-list {\n        margin: 0;\n        padding: 0;\n        list-style: none;\n        margin-left: 20px;\n      }\n\n      .attendance-list li {\n        margin: 5px 0;\n        font-size: 14px;\n        color: #212529;\n      }\n\n      .label {\n        display: inline-block;\n        padding: 5px 10px;\n        border-radius: 20px;\n        font-size: 12px;\n        font-weight: bold;\n        text-transform: uppercase;\n        color: #fff;\n        margin-right: 10px;\n      }\n\n      .label.attendees {\n        background-color: #28a745;\n      }\n\n      .label.absentees {\n        background-color: #dc3545;\n      }\n\n      .footer {\n        text-align: center;\n        margin-top: 20px;\n        font-size: 12px;\n        color: #6c757d;\n      }\n    \u003c/style\u003e\n  \u003c/head\u003e\n  \u003cbody\u003e\n    \u003cdiv class\u003d\"container\"\u003e\n      \u003ch1\u003e出欠情報\u003c/h1\u003e\n      \u003c? \n        // 日付をソートするためにattendanceByDateのキーを取得してソート\n        var sortedDates \u003d Object.keys(attendanceByDate).sort(function(a, b) {\n          return new Date(a) - new Date(b); // 日付順にソート\n        });\n\n        // 曜日取得のための関数\n        function getDayOfWeekJP(dateString) {\n          const daysOfWeekJP \u003d [\u0027日\u0027, \u0027月\u0027, \u0027火\u0027, \u0027水\u0027, \u0027木\u0027, \u0027金\u0027, \u0027土\u0027];\n          const date \u003d new Date(dateString);\n          return daysOfWeekJP[date.getDay()];\n        }\n        \n        for (var i \u003d 0; i \u003c sortedDates.length; i++) {\n          var date \u003d sortedDates[i];\n          var dayOfWeek \u003d getDayOfWeekJP(date); // 曜日を取得\n          var data \u003d attendanceByDate[date];\n      ?\u003e\n        \u003cdiv class\u003d\"date-section\"\u003e\n          \u003cdiv class\u003d\"date-title\"\u003e\u003c?\u003d date ?\u003e (\u003c?\u003d dayOfWeek ?\u003e)\u003c/div\u003e\n          \u003cdiv\u003e\n            \u003cspan class\u003d\"label attendees\"\u003e出席者\u003c/span\u003e\n            \u003cul class\u003d\"attendance-list\"\u003e\n              \u003c? for (var j \u003d 0; j \u003c data.attendees.length; j++) { ?\u003e\n                \u003cli\u003e\u003c?\u003d data.attendees[j] ?\u003e\u003c/li\u003e\n              \u003c? } ?\u003e\n            \u003c/ul\u003e\n          \u003c/div\u003e\n          \u003cdiv\u003e\n            \u003cspan class\u003d\"label absentees\"\u003e欠席者\u003c/span\u003e\n            \u003cul class\u003d\"attendance-list\"\u003e\n              \u003c? for (var j \u003d 0; j \u003c data.absentees.length; j++) { ?\u003e\n                \u003cli\u003e\u003c?\u003d data.absentees[j] ?\u003e\u003c/li\u003e\n              \u003c? } ?\u003e\n            \u003c/ul\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c? } ?\u003e\n      \u003cdiv class\u003d\"footer\"\u003e\n        出欠情報は最新のものが表示されています。\n      \u003c/div\u003e\n    \u003c/div\u003e\n  \u003c/body\u003e\n\u003c/html\u003e"},{"id":"4a187854-1a6c-4f0b-9fbb-ea069fccbfc7","name":"trigger","type":"server_js","source":"function weeklyMessage(){\n  var broadcastMessage \u003d weekSchedules()+\u0027\\n\\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\\n\u0027;\n  broadcastMessage +\u003d weekRemind()\n  broadcastMessage +\u003d generateConcertMessageWithWebsite()\n  sheet_Log.appendRow([new Date(), broadcastMessage]);\n  broadcast(broadcastMessage);\n\n}\n\nfunction weekSchedules(){\n  var broadcastMessage \u003d \u0027【今週の練習予定 ※変更の可能性あり※】\\n\u0027;\n  broadcastMessage +\u003d weekSchedule(0)+\u0027\\n-----\\n\u0027;\n  broadcastMessage +\u003d weekSchedule(1)+\u0027\\n-----\\n\u0027;\n  broadcastMessage +\u003d weekSchedule(2)+\u0027\\n-----\\n\u0027;\n  broadcastMessage +\u003d weekSchedule(3)+\u0027\\n-----\\n\u0027;\n  broadcastMessage +\u003d weekSchedule(4)+\u0027\\n-----\\n\u0027;\n  broadcastMessage +\u003d weekSchedule(5)+\u0027\\n-----\\n\u0027;\n  broadcastMessage +\u003d weekSchedule(6);\n\n  return broadcastMessage;\n}\n\nfunction weekRemind()\n{\n  var startRow \u003d 1; // チェックを開始する行番号\n  var column \u003d 4; // チェックする列番\n  var endRow \u003d sheet_Reminder.getLastRow(); // チェックを終了する行番号\n  var broadcastMessage \u003d \"【今週のリマインダー】\"\n  for (let prm \u003d 0; prm \u003c 7 ; prm++){\n    var currentTime \u003d new Date(date.getFullYear(), date.getMonth(), date.getDate()+prm);\n\n    if(endRow !\u003d 0){\n      for (var row \u003d startRow; row \u003c\u003d endRow; row++) {\n        var cell \u003d sheet_Reminder.getRange(row, column);\n        var cellValue \u003d cell.getValue();\n        var cellTime \u003d new Date(cellValue.getFullYear(), cellValue.getMonth(), cellValue.getDate());\n        var flag \u003d 0;\n        if (cellTime.getTime() \u003d\u003d currentTime.getTime()) {\n          var userName \u003d getUsername(sheet_Reminder.getRange(row, column-1).getValue())\n          broadcastMessage +\u003d \"\\n日付：\"+Utilities.formatDate(currentTime, \u0027JST\u0027, \u0027yyyy-MM-dd\u0027)+\"\\n名前：\"+userName+\"\\nタイトル：\"+sheet_Reminder.getRange(row, column+1).getValue()+\"\\n内容：\"+sheet_Reminder.getRange(row, column+2).getValue()+\u0027\\n----\u0027\n          console.log(broadcastMessage);\n          flag++;\n        } \n      }\n    }\n    else\n    {\n      broadcastMessage +\u003d \" \\n特にありません。\"\n    }\n  }\n  broadcastMessage +\u003d \"\\n\\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\\n\"\n  return broadcastMessage;\n}\n\nfunction weekSchedule(prm)\n{\n  // prm \u003d 3\n  const week \u003d [\u0027日\u0027,\u0027月\u0027,\u0027火\u0027,\u0027水\u0027,\u0027木\u0027,\u0027金\u0027,\u0027土\u0027];\n  var cal \u003d CalendarApp.getCalendarById(\u0027kitsocalender@gmail.com\u0027);\n  var date \u003d new Date();\n  var strBody \u003d \u0027\u0027;\n  var strHeader \u003d \u0027\u0027;\n  date \u003d new Date(date.getFullYear(),date.getMonth(),date.getDate() + prm); // 修正\n  strHeader +\u003d Utilities.formatDate(date,\u0027JST\u0027,\u0027M/d\u0027)\n                + \u0027(\u0027 +week[date.getDay()] + \u0027)\\n\u0027;\n  // 内容\n  strBody \u003d getEvents(cal,date);\n  if ( isNull(strBody) ) {\n    const dayOfWeek \u003d date.getDay();\n    if(dayOfWeek \u003e\u003d 1 \u0026\u0026 dayOfWeek \u003c\u003d 3) {\n      strBody \u003d \u0027個人練習日です。合奏予定はありません\u0027;\n    } else if(dayOfWeek \u003d\u003d\u003d 4 || dayOfWeek \u003d\u003d\u003d 5) {\n      strBody \u003d \u0027開放日です。個人練習ができます\u0027;\n    } else {\n      strBody \u003d \u0027予定はありません\u0027;\n    }\n  }\n  return strHeader + strBody;\n}\n\nfunction fetchAllConcertInfo() {\n  const baseUrl \u003d \"https://www.acros.or.jp/events/sponsored.php\"; // 対象のURL\n  const items \u003d [];\n  \n  let currentPage \u003d 1;\n  const maxPages \u003d 5; // 最大ページ数\n\n  try {\n    while (true) {\n      // ページURLを生成\n      const url \u003d `${baseUrl}?\u0026page\u003d${currentPage}`;\n      console.log(`Fetching page ${currentPage}: ${url}`);\n\n      // Webページを取得\n      const response \u003d UrlFetchApp.fetch(url);\n      const html \u003d response.getContentText();\n\n      // 正規表現で演奏会情報を抽出\n      const eventList \u003d html.match(/\u003cli\u003e\u003c!-- #BeginLibraryItem[\\s\\S]*?\u003c\\/li\u003e/g);\n\n      if (!eventList) {\n        console.log(`ページ ${currentPage} にイベント情報が見つかりませんでした。終了します。`);\n        break; // イベントが見つからなければ終了\n      }\n\n      eventList.forEach(item \u003d\u003e {\n        const titleMatch \u003d item.match(/\u003ch2\u003e([\\s\\S]*?)\u003c\\/h2\u003e/);\n        const dateMatch \u003d item.match(/\u003ctime\u003e([\\s\\S]*?)\u003c\\/time\u003e/);\n        const linkMatch \u003d item.match(/\u003ca href\u003d\"([\\s\\S]*?)\"/);\n\n        if (titleMatch \u0026\u0026 dateMatch \u0026\u0026 linkMatch) {\n          // 日程と時間を分離\n          const rawDate \u003d dateMatch[1]\n            .replace(/\u003cbr\\s*\\/?\u003e/g, \u0027 \u0027) // \u003cbr\u003e をスペースに置換\n            .replace(/\\s+/g, \u0027 \u0027)       // 余分な空白を削除\n            .trim();\n\n\n          items.push({\n            title: titleMatch[1].replace(/\u003c[^\u003e]+\u003e/g, \u0027\u0027).trim(), // タグを削除\n            date: rawDate,\n            link: linkMatch[1].trim()\n          });\n        }\n      });\n\n      console.log(`ページ ${currentPage} のイベント情報を取得しました。`);\n\n      // 次のページへ\n      currentPage++;\n      if (currentPage \u003e maxPages) {\n        console.log(\"最大ページ数に達しました。終了します。\");\n        break;\n      }\n    }\n\n    // 必要に応じてスプレッドシートに出力\n    updateSpreadsheet(items);\n  } catch (e) {\n    console.error(`エラーが発生しました: ${e.message}`);\n  }\n}\n\nfunction updateSpreadsheet(items) {\n\n\n  // ヘッダーをクリアして再作成\n  sheet_Concert.clear();\n  sheet_Concert.appendRow([\"会場\", \"タイトル\", \"日時\", \"リンク\"]);\n\n  items.forEach(item \u003d\u003e {\n    const fullLink \u003d `https://www.acros.or.jp/events/${item.link}`;\n    sheet_Concert.appendRow([\"アクロス福岡\", item.title, item.date, fullLink]);\n  });\n\n  console.log(\"スプレッドシートにデータを更新しました\");\n}"},{"id":"a7942d17-f527-4133-8b43-1b97be58e53e","name":"concertInfo","type":"server_js","source":"function concertInfo() {\n  return generateConcertMessageWithWebsite()\n}\n\nfunction handleconsertInfoGET(){\n  return consertInfoGET()\n}\n\nfunction generateConcertMessageWithWebsite() {\n  // スプレッドシートを取得\n  const data \u003d sheet_Concert.getDataRange().getValues(); // データ全体を取得\n\n  if (data.length \u003c\u003d 1) {\n    console.log(\"演奏会情報が見つかりませんでした。\");\n    return;\n  }\n\n  // ヘッダーを除いたデータを処理\n  const events \u003d data.slice(1).map(row \u003d\u003e ({\n    venue: row[0],\n    title: row[1],\n    datetime: row[2],\n    link: row[3]\n  }));\n\n  // 直近5件のメッセージを作成\n  const recentEvents \u003d events.slice(0, 5);\n  let message \u003d \"【直近の演奏会情報】\\n\\n\";\n  recentEvents.forEach(event \u003d\u003e {\n    message +\u003d `🎶 タイトル: ${event.title}\\n📍 会場: ${event.venue}\\n📅 日時: ${event.datetime}\\n🔗 詳細: ${event.link}\\n\\n`;\n  });\n  message +\u003d `以降の演奏会情報はこちら:\\n ${URL}?path\u003dconsertInfo`\n\n  console.log(\"直近5件のメッセージ:\");\n  console.log(message);\n\n  return message; // メッセージを返す（必要に応じて通知で使用）\n}\n\nfunction consertInfoGET(){\n  const data \u003d sheet_Concert.getDataRange().getValues();\n\n  // ヘッダーを除いたデータを配列に格納\n  const events \u003d [];\n  for (let i \u003d 1; i \u003c data.length; i++) {\n    events.push({\n      venue: data[i][0],\n      title: data[i][1],\n      date: data[i][2],\n      link: data[i][3]\n    });\n  }\n\n  // HTMLテンプレートを取得\n  const template \u003d HtmlService.createTemplateFromFile(\"allConcertInfo\");\n  template.events \u003d events; // データをテンプレートに渡す\n  return template.evaluate().setTitle(\"演奏会一覧\").setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL).addMetaTag(\u0027viewport\u0027, \u0027width\u003ddevice-width, initial-scale\u003d1\u0027);\n\n}\n"},{"id":"73cf4916-04f3-4d1d-8719-c5fc6cee203c","name":"allConcertInfo","type":"html","source":"\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n  \u003chead\u003e\n    \u003cmeta charset\u003d\"UTF-8\"\u003e\n    \u003ctitle\u003e演奏会一覧\u003c/title\u003e\n    \u003cstyle\u003e\n      /* 基本スタイル */\n      body {\n        font-family: Arial, sans-serif;\n        padding: 20px;\n        background-color: #f0f2f5;\n      }\n\n      .container {\n        max-width: 1200px;\n        margin: 0 auto;\n        background-color: #fff;\n        padding: 30px;\n        border-radius: 8px;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        overflow-x: auto;\n      }\n\n      h1 {\n        text-align: center;\n        margin-bottom: 20px;\n        color: #333;\n      }\n\n      /* セクション */\n      .event-section {\n        margin-bottom: 40px;\n      }\n\n      .event-title {\n        font-size: 18px;\n        font-weight: bold;\n        margin-bottom: 10px;\n        color: #555;\n        border-bottom: 2px solid #ccc;\n        padding-bottom: 5px;\n      }\n\n      /* 演奏会コンテナ */\n      .event-container {\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: space-between;\n        margin-bottom: 20px;\n      }\n\n      .event-box {\n        width: auto;\n        background-color: #f8f9fa;\n        padding: 15px;\n        border-radius: 6px;\n        box-shadow: 0 0 5px rgba(0, 0, 0, 0.05);\n        margin-bottom: 20px;\n      }\n\n      .event-box h3 {\n        margin-top: 0;\n        color: #333;\n        border-bottom: 1px solid #ccc;\n        padding-bottom: 5px;\n      }\n\n      .event-box p {\n        margin: 5px 0;\n      }\n\n      .event-box a {\n        color: #007bff;\n        text-decoration: none;\n      }\n\n      /* レスポンシブデザイン */\n      @media (max-width: 600px) {\n        .container {\n          padding: 20px;\n        }\n\n        h1 {\n          font-size: 24px;\n        }\n\n        .reminder-card {\n          padding: 15px;\n        }\n\n        .reminder-date,\n        .reminder-title,\n        .reminder-body {\n          font-size: 14px;\n        }\n\n        .message {\n          font-size: 14px;\n          padding: 15px;\n        }\n      }\n    \u003c/style\u003e\n  \u003c/head\u003e\n  \u003cbody\u003e\n    \u003cdiv class\u003d\"container\"\u003e\n      \u003ch1\u003e演奏会一覧\u003c/h1\u003e\n      \n      \u003c? for (var i \u003d 0; i \u003c events.length; i++) { \n           var event \u003d events[i];\n      ?\u003e\n        \u003cdiv class\u003d\"event-box\"\u003e\n          \u003ch3\u003e\u003c?\u003d event.title ?\u003e\u003c/h3\u003e\n          \u003cp\u003e\u003cstrong\u003e会場:\u003c/strong\u003e \u003c?\u003d event.venue ?\u003e\u003c/p\u003e\n          \u003cp\u003e\u003cstrong\u003e日時:\u003c/strong\u003e \u003c?\u003d event.date ?\u003e\u003c/p\u003e\n          \u003cp\u003e\u003ca href\u003d\"\u003c?\u003d event.link ?\u003e\" target\u003d\"_blank\"\u003e詳細を見る\u003c/a\u003e\u003c/p\u003e\n        \u003c/div\u003e\n      \u003c? } ?\u003e\n    \u003c/div\u003e\n  \u003c/body\u003e\n\u003c/html\u003e"}]}